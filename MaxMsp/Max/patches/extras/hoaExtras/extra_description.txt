hoa.encoder~, "hoa.encoder~ creates the spherical harmonics of a signal depending of an given order and the position on a circle.";hoa.decoder~, "hoa.decoder~ decodes an ambisonic soundfield for a given number of loudspeakers. First argument is the order of the ambisonic soundfield, second argument is the number of loudspeakers, it must be equal or superior to the number of harmonics (2 * order + 1).";hoa.rotate~, "hoa.rotate~ allows you to rotate the ambisonic soundfield.";hoa.plug~, "hoa.plug~ facilitates the modularization of patches for ambisonic processing. The number of inlets and outlets is dependant on the number of inlets and outlets objects within its subpatch window, the ambisonic order andf the 1st argument.
The 2nd argument is the name of the patcher to load and the 3rd argument is the mode pre, no or post decoding.";hoa.connect, "hoa.connect helps to connect the hoa externals together. You must drag-select the objects then bang the hoa.connect to connect the objects together. 1st argument is the ambisonic order and the 2nd is the number of decoder outputs and dac inlets.";hoa.dac~, "hoa.dac~ makes easier the setting of the channels. It works like a dac~ object but you can use the matlab syntax :  to set the loudspeakers routing.";hoa.binaural~, "hoa.binaural~ virtualizes ambisonic soundfield for two headspeakers. It uses hrtf to perform FIR filtering on the incoming signal. Hrtf are extracted from the sipic hrtf database. hoa.binaural~ works up to the order 35 and at 44100 Hz only.";hoa.pi, "hoa.pi is for peoples that never remember more than 4 decimals or want to initialize a good Pi number. ";hoa.scope~, "hoa.scope~ displays the harmonics of an ambisonic soundfield on a circle. The number of harmonics is defined at the object creation with the attribute @order and create order * 2 + 1 inputs (ex : hoa.scope~ @order 7).";hoa.projector~, "hoa.projector~ discretizes the ambisonic soundfield into an array of virtual loudspeakers and gives a access to a new sound domain.";hoa.recomposer~, "hoa.recomposer~ recomposes a plane wave decomposition into circular harmonics and allows you to perform a fish eye operation.";hoa.meter~, "hoa.meter~ displays the peak levels for a circurlar array of loudspeakers. It computes and displays the energy vector. The number of loudspeakers is defined at the object creation with the attribute @ls and the offset of the loudspeakers is defined with the attribute @offset (ex : hoa.meter~ @ld 16 @offset 0.5).";hoa.record~, "hoa.record~ creates an sfrecord~ object with the best arguments to record of an ambisonic soundfield. The limit defined in Max is 15 inputs then the maximum order can be 7.";hoa.play~, "hoa.play~ creates an sfplay~ object with the best arguments to play of an ambisonic soundfield.";hoa.optim~, "hoa.optim~ applies an optimization to the cylindrical harmonics. It can be basic for no optimization, maxRe or inPhase.";hoa.spat, "hoa.spat is a 2D spatialization user interface tool, allow you to spatialize several point sources.
You can control sources with a list of value in the first inlet, zoom in/out, add or remove loudspeakers, modify the distance between listener and loudspeaker...";hoa.control~, "hoa.control~ displays the representation of the harmonics of an encoded ponctual sound for a given order, optimization, azimuth value and wide value. It can be used to understand of the encoding behavior, the optimization and fractionnal order effect (wider) or as a controller for the super" "encoder set.";hoa.stereo~, "hoa.stereo~ decodes an ambisonic soundfield for stereophonic system.";hoa.convolve~, "hoa.convolve~ uses FIR and FFT filtering to apply reveberation on harmonics dependant signals. The zero latency convolution is optimized with the Gardner algorithm and uses the circular harmonics behavior to reduce the number of FFT convolution.";hoa.irconverter~, "hoa.irconverter~ create the circular harmonic dependant signals of a discrete circular impulse response for ambisonics processing. It facilitates the convertion for the use of hoa.convolve~ and allows you to changes the incidence angles of the discrete impulse response.";hoa.wider~, "hoa.wider~ can be used to make more wide the diffusion of a localised sound. The order depending signals are weighted and appear in a logarithmic way to have linear changes.";hoa.delay~, "hoa.delay~ allows you to delay the differents harmonics.";hoa.grain~, "hoa.grain~ synthesizes a diffused sound field. It uses delay lines and amplitude modulation to create streams of grains. The parameters are scaled depending to the orders to generate a granular sound field.";hoa.mirror~, "hoa.mirror~ applies a weight on the negatives harmonics to add the mirror image of a soundfield to itself. ";hoa.mixer~, "hoa.mixer~ helps to understand ambisonics and the behavior of the circular harmonics.";hoa.reverberation~, "hoa.reverberation~ use a algorithm based on feedback network delay and doppler effect to simulate a room reveberation.";