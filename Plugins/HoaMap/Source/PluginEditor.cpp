/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
HoaMapAudioProcessorEditor::HoaMapAudioProcessorEditor (HoaMapAudioProcessor* ownerFilter)
: AudioProcessorEditor (ownerFilter),
speakerOffset_Slider ("speakerOffset"),
speakerDistance_Slider ("speakerDistance"),
nbSources_Label("nbSources"),
nbSpeakers_Label("nbSpeakers")//,
//configButton(0)
{
    bg = ImageCache::getFromMemory (BinaryData::background_jpg, BinaryData::background_jpgSize);
    
    // Setting size of our plug :
    setSize (bg.getWidth(), bg.getHeight());
    //setSize (500, 500);
    
    addAndMakeVisible (&nbSources_Label);
    addAndMakeVisible (&nbSpeakers_Label);
    
    // add the HoaMap component
    addAndMakeVisible (&theMap);
    theMap.addChangeListener(this);
    
    // add a config button
    //addAndMakeVisible (configButton = new ToggleButton (String::empty));
    //configButton->addListener(this);
    
    addAndMakeVisible (configPannel = new ConfigComponent() );
    configPannel->setClosedBounds(getWidth()-25, 5, 20, 20);
    configPannel->setOpenedBounds(5, 5, getWidth()-10, getHeight()-10);
    configPannel->addChangeListener(this);
    
    //add the draggable-number-box sliders :
    addAndMakeVisible (&speakerOffset_Slider);
    speakerOffset_Slider.addChangeListener(this);
    speakerOffset_Slider.setRange(-180, 180, 0.5);
    
    addAndMakeVisible (&speakerDistance_Slider);
    speakerDistance_Slider.addChangeListener(this);
    speakerDistance_Slider.setRange(0., 1., 0.01);
    
    updateMouseCursor ();
    
    // start a timer to check peridiocally if any value of the processor has changed
    startTimer (50);
    
    getProcessor()->addListener(this);
    getProcessor()->addChangeListener(this);
    
    checkAllProcessorValues();
}

HoaMapAudioProcessorEditor::~HoaMapAudioProcessorEditor()
{
    speakerOffset_Slider.removeChangeListener(this);
    speakerDistance_Slider.removeChangeListener(this);
    theMap.removeAllChangeListeners();
    configPannel->removeChangeListener(this);
    getProcessor()->removeListener(this);
}

//==============================================================================
void HoaMapAudioProcessorEditor::paint (Graphics& g)
{
    g.drawImage(bg, 0, 0, bg.getWidth(), bg.getHeight(), 0, 0, bg.getWidth(), bg.getHeight());
    // add some components  :
    theMap.setBounds (30, 30, getWidth()-60, getHeight()-60);
    speakerOffset_Slider.setBounds (422, 459, 62, 20);
    speakerDistance_Slider.setBounds (22, 459, 62, 20);
    // draw things :
    g.setColour(Colour((uint8)50, (uint8)50, (uint8)50, (float)0.5));
    //g.fillRoundedRectangle(440, 40, 50, 40, 4);
    //g.setColour(Colour((uint8)10, (uint8)10, (uint8)10, (float) 0.8));
    g.drawText(String("in : ")+=String(nbSources_Label.getText()), 450, 40, 60, 20, Justification::left, true);
    g.drawText(String("out : ")+=String(nbSpeakers_Label.getText()), 442, 60, 60, 20, Justification::left, true);
    // link
    g.setColour(Colour(0x11111111));
    if (cicm_link_over) g.setColour(Colour(0x11DDDDDD));
    g.fillEllipse(70, 40, 20, 20);
    g.setColour(Colour((uint8)50, (uint8)50, (uint8)50, (float)0.5));
    g.drawText(String("@"), 70, 40, 20, 20, Justification::centred, true);
}

void HoaMapAudioProcessorEditor::mouseMove (const MouseEvent &event)
{
    Point<int> mouse = event.getPosition();
    Rectangle<int> clickable(70, 40, 20, 20);
    //Rectangle<int> clickable(0, 0, 20, 20);
    cicm_link_over = false;
    setMouseCursor(MouseCursor::NormalCursor);
    if (clickable.contains(mouse)) {
        cicm_link_over = true;
        setMouseCursor(MouseCursor::PointingHandCursor);
    }
    //repaint();
}
void HoaMapAudioProcessorEditor::buttonClicked (Button *button)
{
    ;
}
void HoaMapAudioProcessorEditor::buttonStateChanged (Button *button)
{
    ;
}
void HoaMapAudioProcessorEditor::mouseDown (const MouseEvent &event)
{
    Point<int> mouse = event.getPosition();
    Rectangle<int> clickable(70, 40, 20, 20);
    if (clickable.contains(mouse)) {
        URL("http://www.mshparisnord.fr/hoalibrary/").launchInDefaultBrowser();
    }
}

void HoaMapAudioProcessorEditor::checkAllProcessorValues()
{
    HoaMapAudioProcessor* ourProcessor = getProcessor();
    
    // set the distance
    speakerDistance_Slider.setValue (ourProcessor->getScaledParameter(HoaMapAudioProcessor::m_distance_of_loudspeakers_parameter), dontSendNotification);
    theMap.setSpeakerDistance(ourProcessor->getScaledParameter(HoaMapAudioProcessor::m_distance_of_loudspeakers_parameter), dontSendNotification);
    
    // set the offset
    speakerOffset_Slider.setValue (ourProcessor->getScaledParameter(HoaMapAudioProcessor::m_offset_of_loudspeakers_parameter), dontSendNotification);
    theMap.setSpeakerOffset(ourProcessor->getScaledParameter(HoaMapAudioProcessor::m_offset_of_loudspeakers_parameter), dontSendNotification);
    
    // set number of loudspeakers
    m_nbSources = ourProcessor->m_number_of_sources;
    m_nbSpeakers = ourProcessor->m_number_of_loudspeakers;
    
    theMap.setNbSources(m_nbSources, dontSendNotification);
    nbSources_Label.setText(String(m_nbSources), false);
    theMap.setNbSpeakers(m_nbSpeakers, dontSendNotification);
    nbSpeakers_Label.setText(String(m_nbSpeakers), false);
    
    // set the sources coordinates :
    for (int i = 0; i < m_nbSources; i++)
        theMap.setCartesianCoordinates(i, ourProcessor->m_sources_abscissa[i], ourProcessor->m_sources_ordinate[i], dontSendNotification);
}

void HoaMapAudioProcessorEditor::audioProcessorParameterChanged (AudioProcessor *processor, int parameterIndex, float newValue)
{
    HoaMapAudioProcessor* ourProcessor = getProcessor();
    
    if (parameterIndex < 2)
    {
        if (parameterIndex == HoaMapAudioProcessor::m_distance_of_loudspeakers_parameter) {
            speakerDistance_Slider.setValue (ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
            theMap.setSpeakerDistance(ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
        }
        else if (parameterIndex == HoaMapAudioProcessor::m_offset_of_loudspeakers_parameter) {
            speakerOffset_Slider.setValue (ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
            theMap.setSpeakerOffset(ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
        }
    }
    else if(parameterIndex >= 2 && parameterIndex < ourProcessor->getNumParameters())
    {
        int indexBis;
        if(parameterIndex%2 == 0)
        {
            indexBis = ((parameterIndex-2)/2);
            theMap.setSourceAbscissa(indexBis, ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
        }
        else
        {
            indexBis = ((parameterIndex-3)/2);
            theMap.setSourceOrdinate(indexBis, ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
        }
    }
}
void HoaMapAudioProcessorEditor::audioProcessorChanged (AudioProcessor *processor)
{
    ;
}

void HoaMapAudioProcessorEditor::audioProcessorParameterChangeGestureBegin (AudioProcessor *processor, int parameterIndex)
{
    ;
}
void HoaMapAudioProcessorEditor::audioProcessorParameterChangeGestureEnd (AudioProcessor *processor, int parameterIndex)
{
    ;
}

void HoaMapAudioProcessorEditor::timerCallback()
{
    
    HoaMapAudioProcessor* ourProcessor = getProcessor();
    m_nbSources = ourProcessor->m_number_of_sources;
    m_nbSpeakers = ourProcessor->m_number_of_loudspeakers;
    
    theMap.setNbSources(m_nbSources, dontSendNotification);
    nbSources_Label.setText(String(m_nbSources), false);
    theMap.setNbSpeakers(m_nbSpeakers, dontSendNotification);
    nbSpeakers_Label.setText(String(m_nbSpeakers), false);
    //repaint();
}

void HoaMapAudioProcessorEditor::changeListenerCallback (ChangeBroadcaster* source)
{
    if (source == &theMap) {
        for (int i = 0; i < m_nbSources; i++)
        {
            /*
             //check if this source is being dragged
             if ( theMap.getDragState(i) == 1 )
             {
             getProcessor()->beginParameterChangeGesture	(i*2+2);
             getProcessor()->beginParameterChangeGesture	(i*2+3);
             theMap.resetDragState(i);
             }
             else if (theMap.getDragState(i) == 0)
             {
             getProcessor()->endParameterChangeGesture(i*2+2);
             getProcessor()->endParameterChangeGesture(i*2+3);
             theMap.resetDragState(i);
             }
             */
            
            // check if a value has changed and notify host
            if (theMap.getValueChanged(i) == 1) {
                getProcessor()->setParameterNotifyingHost ( i*2+2, (float) (theMap.getSourceAbscissa(i) + 1) * 0.5);
                getProcessor()->setParameterNotifyingHost ( i*2+3, (float) (theMap.getSourceOrdinate(i) + 1) * 0.5);
                theMap.resetValueChanged(i);
            }
        }
    }
    else if (source == &speakerOffset_Slider) {
        theMap.setSpeakerOffset(speakerOffset_Slider.getValue(), dontSendNotification);
        getProcessor()->setParameterNotifyingHost (HoaMapAudioProcessor::m_offset_of_loudspeakers_parameter, (float) (speakerOffset_Slider.getValue()+ 180.0f)/360.0f);
    }
    else if (source == &speakerDistance_Slider) {
        theMap.setSpeakerDistance(speakerDistance_Slider.getValue(), dontSendNotification);
        getProcessor()->setParameterNotifyingHost (HoaMapAudioProcessor::m_distance_of_loudspeakers_parameter, (float) speakerDistance_Slider.getValue());
    }
}
