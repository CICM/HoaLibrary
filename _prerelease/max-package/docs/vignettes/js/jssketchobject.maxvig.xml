<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="_c74_vig.xsl" type="text/xsl"?>
<vignette name="The Sketch Object">
<header1>
The Sketch Object
</header1>
<bodytext>
Every instance of <o>jsui</o> has an instance of Sketch bound to the variable "sketch". This is often the only instance of Sketch you will need to use. However, if you want to do things like render sprites, have multiple layers of images, or use drawing commands to create alpha channels for images, then you can create additional instances to render in. By default, when any function in your <o>jsui</o> object has been called the context is already set for the instance of Sketch bound to the variable "sketch".
</bodytext>
<header2>
Sketch Constructor
</header2>
<code>
  var mysketch = new Sketch(); // create a new instance of Sketch with default width and height
var mysketch = new Sketch(width,height); // create a new instance of sketch with specified width and height
</code>
<header2>
Sketch Properties
</header2>
<code>
  <b>size</b> (<i>Array[2], get/set</i>)
</code>
<bodytext>
size[0] is width size[1] is height.
</bodytext>
<code>
  <b>fsaa</b> (<i>Boolean, get/set</i>)
</code>
<bodytext>
Turns on/off full scene antialiasing. 
</bodytext>
<bodytext>
Sketch Methods
</bodytext>
<bodytext>
Sketch Simple Line and Polygon Methods
</bodytext>
<code>
  <b>move</b> (<i>delta_x, delta_y, delta_z</i>)
</code>
<bodytext>
Moves the drawing position to the location specified by the sum of the current drawing position and the delta <i>x</i>, <i>y</i>, and <i>z</i> arguments. 
</bodytext>
<code>
  <b>moveto</b> (<i>x, y, z</i>)
</code>
<bodytext>
Moves the drawing position to the location specified by the <i>x</i>, <i>y</i>, and <i>z</i> arguments.
</bodytext>
<code>
  <b>point</b> (<i>x, y, z</i>)
</code>
<bodytext>
Draws a point at the location specified by the <i>x</i>, <i>y</i>, and <i>z</i> arguments. After this method has been called, the drawing position is updated to the location specified by the <i>x</i>, <i>y</i>, and <i>z</i> arguments.
</bodytext>
<code>
  <b>line</b> (<i>delta_x, delta_y, delta_z</i>)
</code>
<bodytext>
Draws a line from the current drawing position to the location specified the sum of the current drawing position and the delta <i>x</i>, <i>y</i>, and <i>z</i> arguments. After this method has been called, the drawing position is updated to the location specified by the sum of the current drawing position and the delta <i>x</i>, <i>y</i>, and <i>z</i> arguments.
</bodytext>
<code>
  <b>lineto</b> (<i>x, y, z</i>)
</code>
<bodytext>
Draws a line from the current drawing position to the location specified by the <i>x</i>, <i>y</i>, and <i>z</i> arguments. After this method has been called, the drawing position is updated to the location specified by the <i>x</i>, <i>y</i>, and <i>z</i> arguments.
</bodytext>
<code>
  <b>linesegment</b> (<i>x1, y1, z1, x2, y2, z2</i>)
</code>
<bodytext>
Draws a line from the location specified by the <i>x1</i>, <i>y1</i>, and <i>z1</i>  arguments to the location specified by the <i>x2</i>, <i>y2</i>, and <i>z2</i>  arguments. After this method has been called, the drawing position is updated to the location specified by the <i>x2</i>, <i>y2</i>, and <i>z2</i>  arguments.
</bodytext>
<code>
  <b>tri</b> (<i>x1, y1, z1, x2, y2, z2, x3, y3, z3</i>)
</code>
<bodytext>
Draws a filled triangle with three corners specified by the <i>x1</i>, <i>y1</i>, <i>z1</i>, <i>x2</i>, <i>y2</i>, <i>z2</i>, <i>x3</i>, <i>y3</i>, and <i>z3</i>  arguments. After this method has been called, the drawing position is updated to the location specified by the <i>x3</i>, <i>y3</i>, and <i>z3</i>  arguments.
</bodytext>
<code>
  <b>frametri</b> (<i>x1, y1, z1, x2, y2, z2, x3, y3, z3</i>)
</code>
<bodytext>
Draws a framed triangle with three corners specified by the <i>x1</i>, <i>y1</i>, <i>z1</i>, <i>x2</i>, <i>y2</i>, <i>z2</i>, <i>x3</i>, <i>y3</i>, and <i>z3</i>  arguments. After this method has been called, the drawing position is updated to the location specified by the <i>x3</i>, <i>y3</i>, and <i>z3</i>  arguments.
</bodytext>
<code>
  <b>quad</b> (<i>x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4</i>)
</code>
<bodytext>
Draws a filled quadrilateral with four corners specified by the <i>x1</i>, <i>y1</i>, <i>z1</i>, <i>x2</i>, <i>y2</i>, <i>z2</i>, <i>x3</i>, <i>y3</i>, <i>z3</i>, <i>x4</i>, <i>y4</i>, and <i>z4</i>  arguments. After this method has been called, the drawing position is updated to the location specified by the <i>x4</i>, <i>y4</i>, and <i>z4</i>  arguments.
</bodytext>
<code>
  <b>framequad</b> (<i>x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4</i>)
</code>
<bodytext>
Draws a framed quadrilateral with four corners specified by the <i>x1</i>, <i>y1</i>, <i>z1</i>, <i>x2</i>, <i>y2</i>, <i>z2</i>, <i>x3</i>, <i>y3</i>, <i>z3</i>, <i>x4</i>, <i>y4</i>, and <i>z4</i>  arguments. After this method has been called, the drawing position is updated to the location specified by the <i>x4</i>, <i>y4</i>, and <i>z4</i>  arguments.
</bodytext>
<bodytext>
 Shape Methods
</bodytext>
<code>
  <b>circle</b> (<i>radius, theta_start, theta_end</i>)
</code>
<bodytext>
Draws a filled circle with radius specified by the radius argument. If theta_start and theta_end are specified, then an arc will be drawn instead of a full circle. The theta_start and theta_end arguments are in terms of degrees(0-360). The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>cube</b> (<i>scale_x, scale_y, scale_z</i>)
</code>
<bodytext>
Draws a cube with width 2*scale_x, height 2*scale_y, depth 2*scale_z, and center point at the current drawing position. If the scale_y and scale_z arguments are not specified, they will assume the same value as scale_x. The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>cylinder</b> (<i>radius1, radius2, mag, theta_start, theta_end</i>)
</code>
<bodytext>
Draws a cylinder with top radius specified by the radius1 argument, bottom radius specified by the radius2 argument, length specified by the mag argument, and center point at the current drawing position. If the theta_start and theta_end arguments are specified, then a patch will be drawn instead of a full cylinder. The theta_start and theta_end arguments are in terms of degrees(0-360). The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>ellipse</b> (<i>radius1, radius2, theta_start, theta_end</i>)
</code>
<bodytext>
Draws a filled ellipse with radii specified by the radius1 and radius2 arguments. If theta_start and theta_end are specified, then an arc will be drawn instead of a full ellipse. The theta_start and theta_end arguments are in terms of degrees(0-360). The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>framecircle</b> (<i>radius, theta_start, theta_end</i>)
</code>
<bodytext>
Draws a framed circle with radius specified by the radius argument. If theta_start and theta_end are specified, then an arc will be drawn instead of a full circle. The theta_start and theta_end arguments are in terms of degrees(0-360). The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>frameellipse</b> (<i>radius1, radius2, theta_start, theta_end</i>)
</code>
<bodytext>
Draws a framed ellipse with radii specified by the radius1 and radius2 arguments. If theta_start and theta_end are specified, then an arc will be drawn instead of a full ellipse. The theta_start and theta_end arguments are in terms of degrees(0-360). The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>plane</b> (<i>scale_x1, scale_y1, scale_x2, scale_y2</i>)
</code>
<bodytext>
Draws a plane with top width 2*scale_x1, left height 2*scale_y1, bottom width 2*scale_x2, right height 2*scale_y2, and center point at the current drawing position. If scale_y1 is not specified, it will assume the same value as scale_x1. If scale_x2 and scale_y2 are not specified, they will assume the same values as scale_x1 and scale_y1 respectively. The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>roundedplane</b> (<i>round_amount, scale_x, scale_y</i>)
</code>
<bodytext>
Draws a rounded plane with width 2*scale_x, and height 2*scale_y and center point at the current drawing position. The size of the rounded portion of the plane is determined by the round_amount argument. If scale_y is not specified, it will assume the same value as scale_x. The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>sphere</b> (<i>radius, theta1_start, theta1_end, theta2_start, theta2_end</i>)
</code>
<bodytext>
Draws a sphere with radius specified by the radius argument and center point at the current drawing position. If the theta1_start, theta1_end, theta2_start, and theta2_end arguments are specified, then a patch will be drawn instead of a full sphere. The theta1_start, theta1_end, theta2_start, and theta2_end arguments are in terms of degrees(0-360). The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<code>
  <b>torus</b> (<i>radius1, radius2, theta1_start, theta1_end, theta2_start, theta2_end</i>)
</code>
<bodytext>
Draws a torus with major radius specified by the radius1 argument, minor radius specified by the radius2 argument, and center point at the current drawing position. If theta1_start, theta1_end, theta2_start, and theta2_end are specified, then a patch will be drawn instead of a full torus. The theta1_start, theta1_end, theta2_start, and theta2_end arguments are in terms of degrees(0-360). The current shapeorient, shapeslice, and shapeprim values will also affect the drawing. 
</bodytext>
<header2>
Sketch Shape Attribute Methods
</header2>
<code>
  <b>shapeorient</b> (<i>rotation_x, rotation_y, rotation_z</i>)
</code>
<bodytext>
Sets the rotation for drawing internal to any of the "shape" drawing methods to the rotation specified by the x_rot, y_rot, and rotation_x, rotation_y, and rotation_z arguments. Its use internal to a given shape method such as torus(0.1) would essentially be equivalent to the following set of OpenGL calls.
</bodytext>
<code>
  with (sketch) {
    glmatrixmode("modelview");
    glpushmatrix();
    glrotate(rotation_x,1.,0.,0.);
    glrotate(rotation_y,1.,1.,0.);
    glrotate(rotation_z,0.,0.,1.);
    torus(0.5,0.2);
    glpopmatrix();
  }
</code>
<code>
  <b>shapeslice</b> (<i>slice_a, slice_b</i>)
</code>
<bodytext>
Sets the number of slices to use when rendering any of the "shape" drawing methods. Increasing the slice_a and slice_b arguments will increase the quality at which the shape is rendered, while decreasing these values will improve performance.
</bodytext>
<code>
  <b>shapeprim</b> (<i>draw_prim</i>)
</code>
<bodytext>
Sets the OpenGL drawing primitive to use within any of the "shape" drawing methods. Acceptable values for the draw_prim argument are the following strings: lines, line_loop, line_strip, points, polygon, quads, quad_grid, quad_strip, triangles, tri_grid, tri_fan, tri_strip.
</bodytext>
<bodytext>
Sketch Text Methods
</bodytext>
<code>
  <b>font</b> (<i>fontname</i>)
</code>
<bodytext>
Sets the current font to the fontname specified by the fontname argument.
</bodytext>
<code>
  <b>fontsize</b> (<i>points</i>)
</code>
<bodytext>
Sets the fontsize to the size specified by the points argument. Note that this size is an absolute, rather than relative value.
</bodytext>
<code>
  <b>gettextinfo</b> (<i>string</i>)
</code>
<bodytext>
Returns an array containing the width and height of the given string in absolute screen coordinates, taking into account the current font and fontsize.
</bodytext>
<code>
  <b>text</b> (<i>string</i>)
</code>
<bodytext>
Draws the text specified by the string argument at the current drawing position, taking into account the current font, fontsize, and text alignment. Text is strictly 2D, and does not take into account any world transformations. After calling the text method, if the x axis text alignment is set to "left", the current drawing position will be updated to reflect the world position associated with the end of the string. If the x axis text alignment is set to "right", the current drawing position will be updated to reflect the world position associated with the end of the string. If the x axis text alignment is set to "center", the current drawing position will remain unchanged.
</bodytext>
<code>
  <b>textalign</b> (<i>align_x, align_y</i>)
</code>
<bodytext>
Sets the alignment of text to be drawn with respect to the current drawing position. Acceptable values for the x axis alignment are: "left", "right", or "center". Acceptable values for the y axis alignment are: "bottom", "top", or "center". The default alignment is "left", "bottom".
</bodytext>
<header2>
Sketch Pixel Methods
</header2>
<code>
  <b>copypixels</b> (<i>source_object, destination_x, destination_y, source_x, source_y, width, height</i>)
</code>
<bodytext>
Copies pixels from the source object to the location specified by the destination_x and destination_y arguments. The initial <i>x</i> and <i>y</i> offset into the source and size of the rectangle copied can be speified by the source_x, source_y, width and height arguments. If these are not present an <i>x</i> and <i>y</i> offset of zero and width and height equal to the source image is assumed. No scaling of pixels is supported. The source object can either be an instance of Image, or Sketch. If blending is enabled in the destination sketch object, alpha blending will be performed and the current alpha color will also be applied globally. The copypixels method is much faster than obtaining the equivalent result using glbindtexture() to texture a plane, and is the recommended means of drawing images when scaling and rotation is not required.
</bodytext>
<code>
  <b>depthatpixel</b> (<i>x, y</i>)
</code>
<bodytext>
Returns the depth value associated with the currently rendered pixel at a given absolute screen coordinate.
</bodytext>
<code>
  <b>freepeer</b> (<i></i>)
</code>
<bodytext>
Frees the image data from the native c peer, which is not considered by the JavaScript garbage collector, and may consume lots of memory until the garbage collector decides to run based on JS allocated memory. Once called, the Sketch object is not available for any other use.
</bodytext>
<code>
  <b>getpixel</b> (<i>x, y</i>)
</code>
<bodytext>
Returns an array containing the pixel value at the specified location. This array is ordered RGBA, i.e. array element 0 is red, 1, green, 2, blue, 3 alpha. Color values are floating point numbers in the range 0.-1.
</bodytext>
<code>
  <b>setpixel</b> (<i>x, y, red, green, blue, alpha</i>)
</code>
<bodytext>
Sets the pixel value at the specified location. Color values are floating point numbers in the range 0.-1.
</bodytext>
<code>
  <b>screentoworld</b> (<i>x,y</i>) 
</code>
<bodytext>
Returns an array containing the <i>x</i>, <i>y</i>, and <i>z</i> world coordinates associated with a given screen pixel using the same the depth from the camera as 0,0,0. Optionally a third depth arg may be specified, which may be useful for hit detection and other applications. The depth value is typically specified in the range 0.-1. where 0 is the near clipping plane, and 1. is the far clipping plane. The worldtoscreen method can be used to determine the depth value of a given world coordinate, and the depthatpixel method can be used to determine the depth value associated with the currently rendered pixel at a given absolute screen coordinate.
</bodytext>
<code>
  <b>worldtoscreen</b> (<i>x, y, z</i>)
</code>
<bodytext>
Returns an array containing the x, y, and depth screen coordinates associated with a given world coordinate. The depth value is typically specified in the range 0.-1. where 0 is the near clipping plane, and 1. is the far clipping plane. 
</bodytext>
<header2>
Sketch Stroke Methods
</header2>
<code>
  <b>beginstroke</b> (<i>stroke_style</i>)
</code>
<bodytext>
Begin definition of a stroked path of the style specified by the stroke_style argument. Currently supported stroke styles are "basic2d" and "line".
</bodytext>
<code>
  <b>endstroke</b> (<i></i>)
</code>
<bodytext>
End definition of a stroked path, and render the path.
</bodytext>
<code>
  <b>strokeparam</b> (<i>parameter_name, parameter_values, ...</i>)
</code>
<bodytext>
Set the current value of the parameter specified by the parameter_name argument to be the value specified by parameter_values argument(s). Some parameters are global for the extent of a stroked path definition, while others may vary on a point by point basis. 
</bodytext>
<code>
  <b>strokepoint</b> (<i>x, y, z</i>)
</code>
<bodytext>
Defines an anchor point at the location specified by the <i>x</i>, <i>y</i>, and <i>z</i> arguments. Some stroke styles such as "basic2d" will ignore the z coordinate.
</bodytext>
<header2>
Basic 2D Stroke Style Parameters
</header2>
<code>
  alpha  
</code>
<bodytext>
May vary point to point. Value is specified as an alpha value. Useful if alpha is the only color channel which will vary throughout the path.
</bodytext>
<code>
  color 
</code>
<bodytext>
May vary point to point. Values are specified as red, green, blue, and alpha values.
</bodytext>
<code>
  order 
</code>
<bodytext>
global. Value is specified as interpolation order. The default order is 3, or bi-cubic interpolation.
</bodytext>
<code>
  outline 
</code>
<bodytext>
global. Value is specified as on/off (0/1). The default is 1.
</bodytext>
<code>
  outcolor 
</code>
<bodytext>
May vary point to point. Values are specified as red, green, blue, and alpha values. If no outcolor has been specified, then the current color is assumed. 
</bodytext>
<code>
  scale 
</code>
<bodytext>
May vary point to point. Value is specified as an width value. This value controls how wide the stroked path is.
</bodytext>
<code>
  slices 
</code>
<bodytext>
global. Value is specified as number of slices per curve section. The default is 20.
</bodytext>
<header2>
Line Stroke Style Parameters
</header2>
<code>
  alpha 
</code>
<bodytext>
May vary point to point. Value is specified as an alpha value. Useful if alpha is the only color channel which will vary throughout the path.
</bodytext>
<code>
  color 
</code>
<bodytext>
May vary point to point. Values are specified as red, green, blue, and alpha values.
</bodytext>
<code>
  order 
</code>
<bodytext>
global. Value is specified as interpolation order. The default order is 3, or bi-cubic interpolation.
</bodytext>
<code>
  slices 
</code>
<bodytext>
global. Value is specified as number of slices per curve section. The default is 20.
</bodytext>
<header2>
 Sketch Setup Methods
</header2>
<code>
  <b>default2d</b> (<i></i>)
</code>
<bodytext>
The default2d method is a simple way to set the graphics state to default properties useful for 2D graphics. It is called everytime your object is resized if default2d() has been called more recently than default3d(). It is essentially equivalent to the following set of calls:
</bodytext>
<code>
  with (sketch) {
    glpolygonmode("front_and_back","fill");
    glpointsize(1.);
    gllinewidth(1.);
    gldisable("depth_test");
    gldisable("fog");
    glcolor(0.,0.,0.,1.);
    glshademodel("smooth");
    gldisable("lighting");
    gldisable("normalize");  
    gldisable("texture");  
    glmatrixmode("projection");
    glloadidentity();
    glortho(-aspect, aspect, -1, 1, -1,100.);
    glmatrixmode("modelview");          
    glloadidentity();        
    glulookat(0.,0.,2.,0.,0.,0.,0.,0.,1.);          
    glclearcolor(1., 1., 1., 1.);    
    glclear();
    glenable("blend");
    glblendfunc("src_alpha","one_minus_src_alpha");
  }  
</code>
<code>
  <b>default3d</b> (<i></i>)
</code>
<bodytext>
The default3d method is a simple way to set the graphics state to default properties useful for 3D graphics. It is called everytime the <o>jsui</o> object is resized if default3d() has been called more recently than default2d(). 
</bodytext>
<bodytext>
It is essentially equivalent to the following set of calls:
</bodytext>
<code>
  with (sketch) {
    glpolygonmode("front_and_back","fill");
    glpointsize(1.);
    gllinewidth(1.);
    glenable("depth_test");
    glenable("fog");
    glcolor(0.,0.,0.,1.);
    glshademodel("smooth");
    gllightmodel("two_side", "true");
    glenable("lighting");
    glenable("light0");
    glenable("normalize");  
    gldisable("texture");  
    glmatrixmode("projection");
    glloadidentity();
    gluperspective(default_lens_angle, aspect, 0.1, 100.);
    glmatrixmode("modelview");          
    glloadidentity();        
    glulookat(0.,0.,2.,0.,0.,0.,0.,0.,1.);          
    glclearcolor(1., 1., 1., 1.);    
    glclear();
    glenable("blend");
    glblendfunc("src_alpha","one_minus_src_alpha");
  }
</code>
<code>
  <b>ortho3d</b> (<i></i>)
</code>
<bodytext>
The orth3d method is a simple way to set the graphics state to default properties useful for 3D graphics, using an orthographic projection (i.e. object scale is not affected by distance from the camera). It is called every time the <o>jsui</o> object is resized if ortho3d() has been called more recently than default2d(), or default3d(). 
</bodytext>
<bodytext>
It is essentially equivalent to the following set of calls:
</bodytext>
<code>
  with (sketch) {
    glpolygonmode("front_and_back","fill");
    glpointsize(1.);
    gllinewidth(1.);
    glenable("depth_test");
    glenable("fog");
    glcolor(0.,0.,0.,1.);
    glshademodel("smooth");
    gllightmodel("two_side", "true");
    glenable("lighting");
    glenable("light0");
    glenable("normalize");  
    gldisable("texture");  
    glmatrixmode("projection");
    glloadidentity();
    glortho(-aspect, aspect, -1, 1, -1,100.);
    glmatrixmode("modelview");          
    glloadidentity();        
    glulookat(0.,0.,2.,0.,0.,0.,0.,0.,1.);          
    glclearcolor(1., 1., 1., 1.);    
    glclear();
    glenable("blend");
    glblendfunc("src_alpha","one_minus_src_alpha");
  }    
</code>
<header2>
Sketch OpenGL Methods
</header2>
<code>
  <b>glbegin</b> (<i>draw_prim</i>)
</code>
<code>
  <b>glbindtexture</b> (<i>image_object</i>) Note: this method also calls glenable(texture)
</code>
<code>
  <b>glblendfunc</b> (<i>src_function, dst_function</i>)
</code>
<code>
  <b>glclear</b> (<i></i>)
</code>
<code>
  <b>glclearcolor</b> (<i>red, green, blue, alpha</i>)
</code>
<code>
  <b>glcleardepth</b> (<i>depth</i>)
</code>
<code>
  <b>glclipplane</b> (<i>plane, coeff1, coeff2, coeff3, coeff4</i>)
</code>
<code>
  <b>glcolor</b> (<i>red, green, blue, alpha</i>)
</code>
<code>
  <b>glcolormask</b> (<i>red, green, blue, alpha</i>)
</code>
<code>
  <b>glcolormaterial</b> (<i>face, mode</i>)
</code>
<code>
  <b>glcullface</b> (<i>face</i>)
</code>
<code>
  <b>gldepthmask</b> (<i>on</i>)
</code>
<code>
  <b>gldepthrange</b> (<i>near, far</i>)
</code>
<code>
  <b>gldisable</b> (<i>capability</i>)
</code>
<code>
  <b>gldrawpixels</b> (<i>image</i>)
</code>
<code>
  <b>gledgeflag</b> (<i>on</i>)
</code>
<code>
  <b>glenable</b> (<i>capability</i>)
</code>
<code>
  <b>glend</b> (<i></i>)
</code>
<code>
  <b>glfinish</b> (<i></i>)
</code>
<code>
  <b>glflush</b> (<i></i>)
</code>
<code>
  <b>glfog</b> (<i>parameter_name, value</i>)
</code>
<code>
  <b>glfrustum</b> (<i>left, right, bottom, top, near, far</i>)
</code>
<code>
  <b>glhint</b> (<i>target, mode</i>)
</code>
<code>
  <b>gllight</b> (<i>light, parameter_name, value</i>)
</code>
<code>
  <b>gllightmodel</b> (<i>parameter_name, value</i>)
</code>
<code>
  <b>gllinestipple</b> (<i>factor, bit-pattern</i>)
</code>
<code>
  <b>gllinewidth</b> (<i>width</i>)
</code>
<code>
  <b>glloadidentity</b> (<i></i>)
</code>
<code>
  <b>glloadmatrix</b> (<i>matrix_array</i>)
</code>
<code>
  <b>gllogicop</b> (<i>opcode</i>)
</code>
<code>
  <b>glmaterial</b> (<i></i>)
</code>
<code>
  <b>glmatrixmode</b> (<i>mode</i>)
</code>
<code>
  <b>glmultmatrix</b> (<i>matrix_array</i>)
</code>
<code>
  <b>glnormal</b> (<i>x, y, z</i>)
</code>
<code>
  <b>glortho</b> (<i>left, right, bottom, top, near, far</i>)
</code>
<code>
  <b>glpointsize</b> (<i>size</i>)
</code>
<code>
  <b>glpolygonmode</b> (<i>face, mode</i>)
</code>
<code>
  <b>glpolygonoffset</b> (<i>factor, units</i>)
</code>
<code>
  <b>glpopattrib</b> (<i></i>)
</code>
<code>
  <b>glpopmatrix</b> (<i></i>)
</code>
<code>
  <b>glpushattrib</b> (<i></i>)
</code>
<code>
  <b>glpushmatrix</b> (<i></i>)
</code>
<code>
  <b>glrect</b> (<i>x1, y1, x2, y2</i>) 
</code>
<code>
  <b>glrotate</b> (<i>angle, x, y, z</i>)
</code>
<code>
  <b>glscale</b> (<i>x_scale, y_scale, z_scale</i>)
</code>
<code>
  <b>glscissor</b> (<i>x, y, width, height</i>)
</code>
<code>
  <b>glshademodel</b> (<i>mode</i>)
</code>
<code>
  <b>gltexcoord</b> (<i>s, t</i>)
</code>
<code>
  <b>gltexenv</b> (<i>parameter_name, val1, val2, val3, val4</i>)
</code>
<code>
  <b>gltexgen</b> (<i>coord, parameter_name, val1, val2, val3, val4</i>)
</code>
<code>
  <b>gltexparameter</b> (<i>parameter_name, val1, val2, val3, val4</i>)
</code>
<code>
  <b>gltranslate</b> (<i>delta_x, delta_y, delta_z</i>)
</code>
<code>
  <b>glulookat</b> (<i>eye_x, eye_y, eye_z,  center_x,  center_y, center_z, up_x, up_y, up_z</i>)
</code>
<code>
  <b>gluortho2d</b> (<i>left, right, bottom, top</i>)
</code>
<code>
  <b>gluperspective</b> (<i>fovy, aspect, near, far</i>)
</code>
<code>
  <b>glvertex</b> (<i>x, y, z</i>)
</code>
<code>
  <b>glviewport</b> (<i>x, y, width, height</i>)
</code>
</vignette>
