<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="_c74_vig.xsl" type="text/xsl"?>
<vignette name="The LiveAPI Object">
	<header1>The LiveAPI Object</header1>
	<bodytext>
The LiveAPI object provides a means of communicating with the Live API functions from JavaScript. For background information on this functionality, please see the <link module="core" name="live_api_overview" type="vignette">Live API Overview</link> and <link module="core" name="live_object_model" type="vignette">Live Object Model</link> documents, as well as the Reference pages for <o>live.path</o>, <o>live.object</o> and <o>live.observer</o> objects, which provide the same basic functionality as the LiveAPI object, but from the Max patcher.
</bodytext>
	<header2>LiveAPI Constructor</header2>
	<code>     api = new LiveAPI([callback], [path]/[id]);</code>
	<bodytext><m>callback</m> is an optional JavaScript function. This function will be called when the LiveAPI object refers to a new object in Live (if the LiveAPI object's path change, for instance),  or when an observed property changes. <m>path</m> refers to the object in Live "pointed to" by the LiveAPI object (e.g. "live_set tracks 0 devices 0"). Alternately, a valid <m>id</m> can be used to refer a LiveAPI object to an object in Live.
</bodytext>
	<bluebox>
		<bodytext>
Technical note: you cannot use the LiveAPI object in JavaScript global code. Use the <o>live.thisdevice</o> object to determine when your Max Device has completely loaded (the object sends a <m>bang</m> from its left outlet when the Device is fully initialized, including the Live API).
</bodytext>
	</bluebox>
	<br/>
	<bluebox>
		<bodytext>
Legacy note: previous versions of the LiveAPI object required the jsthis object's this.patcher property as the first argument. For backward-compatibility, this first argument is still supported, but is no longer necessary.
</bodytext>
	</bluebox>
	<br/>
	<header2>LiveAPI Properties</header2>
	<code><b>id</b> (<i>Number, get/set</i>) 
</code>
	<bodytext>
The id of the Live object referred to by the LiveAPI object. These ids are dynamic and awarded in realtime from the Live application, so should not be stored and used over multiple runs of Max for Live.
</bodytext>
	<code><b>path</b> (<i>String, get/set</i>) 
</code>
	<bodytext>
The path to the Live object referred to by the LiveAPI object. These paths are dependent on the currently open Set in Live, but are otherwise stable: <i>live_set tracks 0 devices 0</i> will always refer to the first device of the first track of the open Live Set.
</bodytext>
	<code><b>children</b> (<i>Array, get</i>) 
</code>
	<bodytext>
An array of children of the object at the current path.
</bodytext>
	<code><b>mode</b> (<i>Number, get/set</i>) 
</code>
	<bodytext>
The follow mode of the LiveAPI object. 0 (default) means that LiveAPI follows the object referred to by the <m>path</m>, even if it is moved in the Live user interface. For instance, consider a Live Set with two tracks, "Track 1" and "Track 2", left and right respectively. If your LiveAPI object's path is <i>live_set tracks 0</i>, the left-most track, it will refer to "Track 1". Should the position of "Track 1" change, such that it is now to the right of "Track 2", the LiveAPI object continues to refer to "Track 1". A <m>mode</m> of 1 means that LiveAPI updates the followed object based on its location in the Live user interface. In the above example, the LiveAPI object would always refer to the left-most track, updating its <m>id</m> when the object at that position in the user interface changes.
</bodytext>
	<code><b>type</b> (<i>String, get</i>) 
</code>
	<bodytext>
The type of the object at the current path. Please see the <link module="core" name="live_api_overview" type="vignette">Live API Overview</link> and <link module="core" name="live_object_model" type="vignette">Live Object Model</link> documents for more information.
</bodytext>
	<code><b>info</b> (<i>String, get</i>) 
</code>
	<bodytext>
A description of the object at the current path, including id, type, children, properties and functions.
</bodytext>
	<code><b>property</b> (<i>String, get/set</i>) 
</code>
	<bodytext>
The observed property, child or child-list of the object at the current path, if desired. For instance, if the LiveAPI object refers to "live_set tracks 1", setting the <m>property</m> to "mute" would cause changes to the "mute" property of the 2nd track to be reported to the callback function defined in the LiveAPI Constructor.
</bodytext>
	<code><b>proptype</b> (<i>String, get</i>) 
</code>
	<bodytext>
The type of the currently observed property or child. The types of the properties and children are given in the <link module="core" name="live_object_model" type="vignette">Live Object Model</link>. 
</bodytext>
	<code><b>patcher</b> (<i>Patcher object, get</i>) 
</code>
	<bodytext>
The patcher of the LiveAPI object, as passed into the Constructor.
</bodytext>
	<header2>
LiveAPI Methods
</header2>
	<code><b>getcount</b> (<i>child</i>)
</code>
	<bodytext>
The count of children of the object at the current path, as specified by the <m>child</m> argument.
</bodytext>
	<code><b>goto</b> (<i>path</i>)
</code>
	<bodytext>
Navigates to the <m>path</m> and causes the id of the object at that path out be sent to the callback function defined in the Constructor. If there is no object at the path, id 0 is sent.
</bodytext>
	<code><b>get</b> (<i>property</i>)
</code>
	<bodytext>
Returns the value or list of values of the specified <m>property</m> of the current object.
</bodytext>
	<code><b>getstring</b> (<i>property</i>)
</code>
	<bodytext>
  Returns the value or list of values of the specified <m>property</m> of the current object as a String object.
</bodytext>
	<code><b>set</b> (<i>property</i> <i>value</i>)
</code>
	<bodytext>
Sets the value or list of values of the specified <m>property</m> of the current object. 
</bodytext>
	<code><b>call</b> (<i>function</i> <i>(arguments...)</i>)
</code>
	<bodytext>
Calls the given <m>function</m> of the current object, optionally with a list of <m>arguments</m>.
</bodytext>
	<header2>Sample Code</header2>
	<code>
  var api = new LiveAPI(sample_callback, "live_set tracks 0");
  if (!api) {
    post("no api object\n");
    return;
  }
  post("api.mode", api.mode ? "follows path" : "follows object", "\n");
  post("api.id is", api.id, "\n");
  post("api.path is", api.path, "\n");
  post("api.children are", api.children, "\n");
  post("api.getcount(\"devices\")", api.getcount("devices"), "\n");
  
  api.property = "mute";
  post("api.property is", api.property, "\n");
  post("type of", api.property, "is", api.proptype, "\n");

  function sample_callback(args)
  {
    post("callback called with arguments:", args, "\n");
  }
</code>
	<header2>The LiveAPI Object and the Scheduler</header2>
	<bodytext>
Beginning with release 6.0 of Max, it is no longer possible to configure JavaScript functions to run in the 
high-priority thread of Max's scheduler. The LiveAPI object <i>cannot be created or used</i> in the 
high-priority thread, so users should be sure to use the <o>defer</o> or <o>deferlow</o> 
objects to re-queue messages to the <o>js</o> object.
</bodytext>
</vignette>
