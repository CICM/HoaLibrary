<?xml version='1.0' encoding='UTF-8'?> 
<?xml-stylesheet href="./_c74_vig.xsl" type="text/xsl"?> 
<vignette name='Live API Overview'>
  <header1>Live API Overview</header1>
  <bodytext>
     <i>Basic information about the Live API and links to further readings.
      <br/>
     This document refers to Ableton Live version 9 or newer.</i>
  </bodytext>
  <intro>Besides building new instruments and effects to be used in Live, Max For
    Live also allows to access Live itself, its tracks, clips, devices and
    hardware control surfaces. This chapter defines some basic terms used
    throughout the whole Live API and introduces the Max objects representing
    the Live API. 
  </intro>
  <header2>Live Object Model</header2>
  <bodytext>The accessible parts of Live are represented by a hierarchy of objects
    called the 
    <i>Live Object Model (LOM)</i>
    . 
    <br/>
    <br/>
     The model describes the hierarchy of objects inside Live, as seen from the
    Max devices. There are various classes of objects in the model, like 
    <m>Track</m>
     or 
    <m>Clip</m>
    . For certain objects only a single instance exists, for other multiple
    instances are hold in lists. The 
    <link name='live_object_model' module='core' type='vignette'>Live Object Model reference</link>
     shows how to navigate from a number of root objects down a path to the
    particular object of interest, and what to do with it. 
  </bodytext>
  <header2>Object Path</header2>
  <bodytext>
     Live objects are accessed using paths according to the Live Object Model.
    For example, the first clip in the third track can be accessed by the path 
    <m>live_set tracks 2 clip_slots 0 clip</m>
    . Alternatively, it can be accessed via 
    <m>live_set scenes 0 clip_slots 2 clip</m>
    . Or, if the clip is shown in the detail view, via 
    <m>live_set view detail_clip</m>
    . 
    <br/>
    <br/>
     As you can see, different paths can point to the same Live object. One of
    these paths is the 
    <i>canonical path</i>
    . 
    <br/>
    <br/>
     When communicating with the Live API, no quotes are used in paths. List
    indexes start with 0. 
    <br/>
    <br/>
     When navigating through the object model, besides these 
    <i>absolute</i>
     paths, 
    <i>relative</i>
     paths can be used. These determine a subpath beginning at the current
    position in the object hierarchy. 
  </bodytext>
  <header2>Root objects</header2>
  <bodytext>
     (Absolute) paths to all objects start with one of 
    <m>live_app</m>
    , 
    <m>live_set</m>
    , 
    <m>control_surfaces N</m>
     or 
    <m>this_device</m>
    . These are the 
    <i>root</i>
     objects. 
  </bodytext>
  <header2>Canonical Path</header2>
  <bodytext>
     Different paths can lead to the same object. 
    <m>live_set view selected_track</m>
     and 
    <m>live_set tracks 3</m>
     are the same object if the fourth track is selected. 
    <br/>
    <br/>
     Each object has a unique canonical path, 
    <m>live_set tracks 3</m>
     in this case. The canonical path is send out of 
    <o>live.object</o>
     in reponse to 
    <m>getpath</m>
    . In the Live Object Model, the canonical path is shown by bold connectors. 
    <br/>
    <br/>
  </bodytext>
  <header2>Canonical Parent</header2>
  <bodytext>
     Additionally to what is described in the LOM, all objects have a 
    <m>canonical_parent</m>
     child which is used by Live to determine the canonical path of an object.
    The canonical parents are get-only and useful for patching, too. For
    example, 
    <m>goto this_device canonical_parent</m>
     is the perfect way to get the own track object. 
  </bodytext>
  <header2>Object ids</header2>
  <bodytext>
     An object id identifies a particular object instance in Live like a track
    or a clip. 
    <br/>
    <br/>
     To get an id, a 
    <o>live.path</o>
     object must be used to navigate to the Live object. When a 
    <o>live.path</o>
     object sees this Live object the first time, an id is assigned to it. 
    <br/>
    <br/>
     The id is only valid inside the device with the 
    <o>live.path</o>
     and remains unchanged as long the object exists. If the object is moved in
    Live, its id usually remains unchanged. There may be exceptions if the
    movement is implemented as a delete/create sequence, though. When an object
    is deleted and a new object is created at its place, it will get a new id. 
    <br/>
    <br/>
     An id is never reused in the scope of a Max device. Ids are not stored.
    Therefore, after loading a saved device, the 
    <o>live.path</o>
     object must navigate to the object again. 
    <br/>
    <br/>
     An object id consists of the word 
    <m>id</m>
     and a number, separated by a space, like 
    <m>id 3</m>
    . 
    <m>id 0</m>
     refers to 
    <i>no object</i>
    . In Max terms it's a list of the symbol 
    <m>id</m>
     and an integer. 
  </bodytext>
  <header2>Object Types</header2>
  <bodytext>
     Each Live object is of a particular object type (or 
    <i>Class</i>
    ). This object type determines what kind of object that is and what
    children, properties and functions it has. The object types are described in
    detail in the Live Object Model. 
  </bodytext>
  <header2>Children</header2>
  <bodytext>
     Live objects have children identified by name. The names of the possible
    children of some names point to single objects, others to a list of objects.
    The child name also determines which object type you can expect to find
    there. 
    <br/>
    <br/>
     List names are in plural, whereas single child names are in singular. Lists
    may be empty. Sending 
    <m>
      getcount 
      <i>name</i>
    </m>
     to 
    <o>live.path</o>
     allows to find out how many children are in the list. 
    <br/>
    <br/>
     Single children names may point to no object, in which case you get 
    <m>id 0</m>
     if you navigate there or send 
    <m>
      get 
      <i>name</i>
    </m>
     to 
    <o>live.object</o>
    . 
    <br/>
    <br/>
     Most children can be monitored using 
    <o>live.observer</o>
    . 
  </bodytext>
  <header2>Properties</header2>
  <bodytext>
     Live objects have properties which describe it's actual state. Properties
    are accessed by sending 
    <m>get</m>
     and 
    <m>set</m>
     messages to 
    <o>live.object</o>
    . Not all properties can be set, though. 
    <br/>
    <br/>
     Many properties can be monitored using 
    <o>live.observer</o>
    . 
  </bodytext>
  <header2>Functions</header2>
  <bodytext>
     Many Live objects have functions which can be called by the respective
    message to 
    <o>live.object</o>
    . A function call may have parameters (a list of values) and a single return
    value, which is sent to the outlet of 
    <o>live.object</o>
    . 
  </bodytext>
  <header2>Datatypes</header2>
  <bodytext>
     Properties and function parameters or return values used in the Live Object
    Model and by the Max objects to access the Live API have one of the
    following data types: 
    <br/>
    <table>
      <tr>
        <th>Datatype</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>bool</td>
        <td>0 for false and 1 for true</td>
      </tr>
      <tr>
        <td>symbol</td>
        <td class='liveapi'>
          a string with unicode character set 
          <br/>
           use double quotes in message boxes to create symbols with spaces 
          <br/>
           double quotes in symbols are to be 
          <i>prefixed</i>
           by backslashes 
          <br/>
           backslashes are included as double backslashes 
          <br/>
           example: 
          <m>alpha beta \"gamma\" \\x\\</m>
           creates the symbol 
          <m>alpha beta "gamma" \x\</m>
        </td>
      </tr>
      <tr>
        <td>int</td>
        <td>a 32 bit signed integer</td>
      </tr>
      <tr>
        <td>float</td>
        <td>a 32 bit float value</td>
      </tr>
      <tr>
        <td>double</td>
        <td>a 64 bit float value (maily used for timing values)</td>
      </tr>
      <tr>
        <td>beats</td>
        <td>song beat time counted in quarter notes, represented as double</td>
      </tr>
      <tr>
        <td>time</td>
        <td>song time in seconds, represented as double</td>
      </tr>
      <tr>
        <td> </td>
        <td>time = beats * 60 / tempo (in bpm)</td>
      </tr>
      <tr>
        <td> </td>
        <td>sometimes the time is given in milliseconds (ms)</td>
      </tr>
      <tr>
        <td>list</td>
        <td>a space separated list of the types above</td>
      </tr>
    </table>
  </bodytext>
  <header2>Notifications</header2>
  <bodytext>
     When Max devices need to know the state of the Live application and its
    objects, they can actively poll the state by navigating through the object
    hierarchy and getting object properties or calling functions. 
    <br/>
    <br/>
     But changes happen in Live while the Max device is passive. To allow the
    Max device to react on these changes in Live, notifications are sent from
    Live to the Max device. Notifications are spontaneous in the sense that
    messages are sent to outlets spontaneously, 
    <i>not</i>
     in response to a message received at an inlet. 
    <br/>
    <br/>
     The notifications include object ids sent when the Live object at a certain
    path changes and values sent when a property changes. 
    <br/>
    <br/>
    <bluebox>
      <bodytext>
        Note: changes to a Live Set and its contents are not possible from a
        notification. The error message in the Max Window is 'Changes cannot be
        triggered by notifications'. In many cases putting a 
        <o>deferlow</o>
         between the notification outlet and the actual change helps to resolve
        the issue.
      </bodytext>
    </bluebox>
  </bodytext>
  <header2>Max Objects</header2>
  <bodytext>
     Four Max objects interact in a certain way to allow Max devices to access
    the Live objects. 
    <br/>
    <br/>
    <table>
      <tr>
        <th>Max object</th>
        <th>Purpose</th>
      </tr>
      <tr>
        <td>
          <o>live.path</o>
        </td>
        <td>select objects in the Live object hierarchy</td>
      </tr>
      <tr>
        <td>
          <o>live.object</o>
        </td>
        <td>get and set properties and children, call functions</td>
      </tr>
      <tr>
        <td>
          <o>live.observer</o>
        </td>
        <td>monitor properties and children</td>
      </tr>
      <tr>
        <td>
          <o>live.remote~</o>
        </td>
        <td>control Live device parameters in real time</td>
      </tr>
    </table>
    <br/>
     The following patch shows the typical interconnections between the Live API
    objects. 
    <o>live.path</o>
     is sending object ids out of its leftmost outlet connected to the rightmost
    inlet of 
    <o>live.object</o>
    , 
    <o>live.observer</o>
     and 
    <o>live.remote~</o>
    . This causes these objects to operate on the object selected by 
    <o>live.path</o>
    . 
    <br/>
    <br/>
    <div class='imagebox'>
      <img src='images/TypicalConnections.png'/>
    </div>
  </bodytext>
  <header2>live.path</header2>
  <bodytext>
    <o>live.path</o>
     objects are used to navigate to the Live objects on which 
    <o>live.object</o>
    , 
    <o>live.observer</o>
     and 
    <o>live.remote~</o>
     are supposed to operate. For this purpose, navigation messages like 
    <m>goto live_set</m>
     are sent to 
    <o>live.path</o>
    , which replies by sending an object id to the left outlet. 
    <br/>
    <br/>
    <o>live.path</o>
     can also observe the given path, and when the object at this path changes,
    its id is sent to the middle outlet. This is particularly useful for paths
    like 
    <m>live_set view selected_track</m>
     which point to the currently selected track. 
  </bodytext>
  <header2>live.object</header2>
  <bodytext>
    <o>live.object</o>
     is used to operate on a particular Live object which id has been received
    from 
    <o>live.path</o>
    . It allows to get or set properties of the Live object and to call its
    functions with parameters. 
  </bodytext>
  <header2>live.observer</header2>
  <bodytext>
    <o>live.observer</o>
     monitors the state of a particular Live object which id has been received
    from 
    <o>live.path</o>
    . After telling 
    <o>live.observer</o>
     which property to observe it recognizes all changes of the property and
    sends the current values to its left outlet. 
  </bodytext>
  <header2>live.remote~</header2>
  <bodytext>
    <o>live.remote~</o>
     receives the id of a DeviceParameter object from 
    <o>live.path</o>
     and then allows to feed this parameter with new values by sending them into
    the left inlet, in realtime, without effects on the undo history or the
    parameter automation, which is deactivated. 
    <br/>
    <br/>
     DeviceParameter objects are children of Live devices, including Max
    devices, and also of tracks, like volume and pan. 
  </bodytext>
  <header2>LiveAPI</header2>
  <bodytext>
     The 
    <link name='jsliveapi' module='js' type='vignette'>LiveAPI</link>
     Javascript object is available in code written for the 
    <o>js</o>
     object. It provides a succinct means of communicating with the Live API
    functions from JavaScript, incorporating the functionality provided by the 
    <o>live.path</o>
    , 
    <o>live.object</o>
     and 
    <o>live.observer</o>
     objects. 
  </bodytext>
</vignette>
