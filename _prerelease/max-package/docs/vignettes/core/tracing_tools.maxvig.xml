<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="_c74_vig.xsl" type="text/xsl"?>
<vignette name="Debug Window">
	<header1>
	Debug Window
	</header1>
	<bodytext>
			The debug window provides information about the state of your patch as it is executing. By setting a <link module="core" name="watchpoints" type="vignette">break watchpoint</link>, you can look at the suspended execution of your patch to learn more information about its behavior.
		</bodytext>
	<br/>
	<bluebox>
		<header2>
		Suspending execution of a patcher
	</header2>
		<ul>
			<li>
		Choose <b>Enable Debugging</b> from the Debug menu
	</li>
			<li>
		Set a 
		<link module="core" name="watchpoints" type="vignette">break watchpoint</link> 
		on a patch cord where you want to know about the execution of a patch
	</li>
			<li>
		Perform some action so that a message flows through the patch cord.
	</li>
			<li>
		As soon as a message is about to travel through the patch cord, Max will 
		stop executing, begin pulsing the patch cord, and open the <i>debug window</i>. 
		At this point you can either step through the patch manually, auto-step through 
		the patch, or continue normal execution.
	</li>
		</ul>
	</bluebox>
	<br/>
	<header2>
	The debug window toolbar
	</header2>
	<ul>
		<li><i>Pause</i> lets you pause at any point while you're
			automatically stepping through a patch.
		</li>
	</ul>
	<bodytext>
		<img src="images/tracing_tools2.png"/>
	</bodytext>
	<ul>
		<li><i>Continue</i> will resume normal execution from the point where the patch has been stopped.
		</li>
	</ul>
	<bodytext>
		<img src="images/tracing_tools3.png"/>
	</bodytext>
	<ul>
		<li><i>Step</i> steps through your patch by sending a single message through a patch cord.
		</li>
	</ul>
	<bodytext>
		<img src="images/tracing_tools4.png"/>
	</bodytext>
	<ul>
		<li><i>Abort</i> stops execution of your patch and returns it to the state where it is waiting for user input.
		</li>
	</ul>
	<bodytext>
		<img src="images/tracing_tools5.png"/>
	</bodytext>
	<ul>
		<li><i>Inspect Sender</i> opens the
			<link module="core" name="inspector" type="vignette">inspector window</link>
			on the object that is sending a message in the selected line in the debug window's display.
		</li>
	</ul>
	<bodytext>
		<img src="images/tracing_tools6.png"/>
	</bodytext>
	<ul>
		<li><i>Show Sender</i> highlights the object that is sending a message in the selected line in the debug window's display.
		</li>
	</ul>
	<bodytext>
		<img src="images/tracing_tools7.png"/>
	</bodytext>
	<ul>
		<li><i>Inspect Receiver</i> opens the
			<link module="core" name="inspector" type="vignette">inspector window</link>
			on the object that is receiving a message in the selected line in the debug window's display.
		</li>
	</ul>
	<bodytext>
		<img src="images/tracing_tools8.png"/>
	</bodytext>
	<ul>
		<li><i>Show Sender</i> highlights the object that is sending a message in the selected line in the debug window's display.
		</li>
	</ul>
	<bodytext>
		<img src="images/tracing_tools9.png"/>
	</bodytext>
	<bodytext>
		Many of the buttons in the toolbar have corresponding menu items in the Debug menu. You may find it easier to use the menu items, particularly the keyboard equivalents.
		</bodytext>
	<br/>
	<header2>
	Understanding the debug window display
	</header2>
	<bodytext>
			Each row in the debug window shows a message being sent from a sending object to receiving object. The sender, receiver, message, and arguments are displayed. The row highlighted in green is the message that will be sent next when you invoke the Step command. The current list of rows in the debug window is an <i>execution stack</i>. In other words, each object is sending a message <i>in the middle of</i> receiving an object. 
</bodytext>
	<bodytext>
In the example below, the first thing that happened was that a <o>button</o> object send a <m>bang</m> message to a <o>trigger</o> object. As a result of receiving the <m>bang</m>, the trigger sent a <m>bang</m> message to an <o>uzi</o>. As part of the <o>uzi</o> object's handling of the <m>bang</m> message it received, it in turn sent a <m>bang</m> message to another <o>trigger</o> object.
</bodytext>
	<bodytext>
		<img src="images/tracing_tools1.png"/>
	</bodytext>
	<bodytext>
This sequence continues until we get to the current execution point shown, where the <o>urn</o> object is about to send a 1 to the <o>pack</o> object. The patch below shows the breakpoint where this will happen in red.
</bodytext>
	<bodytext>
		<img src="images/tracing_tools11.png"/>
	</bodytext>
	<bodytext>
As you step through the patch, you will observe the execution stack grow and shrink.
</bodytext>
	<bodytext>
	When the execution of the patch has reached a point where Max is waiting for user input, there will be nothing left in the debug window display, which means the execution stack is now empty.
</bodytext>
	<header2>
Debugging restrictions
</header2>
	<bodytext>
	If you are in the middle of debugging, you cannot operate your patch. In addition, you cannot close the patcher window being debugged, and you cannot quit Max. If these actions interest you more than the debugging process, choose <b>Abort</b> from the Debug menu, and you will be able to operate Max normally again.
</bodytext>
</vignette>
