<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="_c74_vig.xsl" type="text/xsl"?>
<vignette name="Arguments and Special Characters in Max">
	<header1>
		Arguments and Special Characters in Max - $ and #
	</header1>
	<header2>
		<m>$</m> in a <o>message</o> box
	</header2>
		<bodytext>
			The dollar sign (<m>$</m>) is a special character which can be used in 
			a <o>message</o> box to indicate a changeable argument. When 
			the <o>message</o> box contains a $ and a number in the range 1-9 (such as <m>$2</m>) 
			as one of its arguments, that argument will be replaced by the corresponding 
			argument in the incoming message before the <o>message</o> box sends out 
			its own message.
		</bodytext>
		<bodytext>
			When a <o>message</o> box is triggered without receiving values for all of 
			its changeable arguments (for instance, when it is triggered by a <m>bang</m>), 
			it uses the most recently received values. The initial value of all changeable 
			arguments is 0.
		</bodytext>
		<bodytext>
			A <o>message</o> box will not be triggered by a word received in its inlet 
			(except for <m>bang</m>), unless the word is preceded by the word <m>symbol</m>. In that 
			case, the $1 argument will be replaced.
		</bodytext>
		<bodytext>
			If you want to use a dollar sign in a message without it 
			having this special meaning, you should precede the character with a backslash (\).
		</bodytext>
	<header2>
		<m>$</m> in an object box
	</header2>
		<bodytext>
			The <o>expr</o>, <o>if</o>, <o>sxformat</o> and <o>vexpr</o> objects also use 
			the changeable <m>$</m> arguments. When you use the <m>$</m> character with 
			these objects, it must be followed immediately by the letter <m>i</m>, <m>f</m>, or <m>s</m>, which indicates 
			whether the argument is to be replaced by an int, a float, or a symbol.
		</bodytext>
		<bodytext>
			If a message received in the inlet does not match the type of the changeable 
			argument when using these objects (e.g., if an int is received to replace a $f argument), the 
			object will try to convert the input to the proper type. The <o>expr</o> and <o>if</o> objects
			cannot convert symbols to numbers, so an error message will be printed if a symbol 
			is received to replace a $i or $f argument.
		</bodytext>
	<header2>
		Using the pound sign (<m>#</m>) in objects and <o>message</o> box objects
	</header2>
		<bodytext>
			When you are editing a patcher which will be used as an abstraction within 
			another Patcher, <o>message</o> box objects and most object boxes in the abstraction 
			can be given a changeable argument by typing in a pound sign and a number 
			(e.g. <m>#1</m>) as an argument. When the abstraction is used inside another 
			Patcher, an argument typed into the object box in the Patcher replaces the 
			<m>#</m> argument inside the abstraction.
		</bodytext>
		<bodytext>
			This lets you use typed-in arguments to supply information to <o>patcher</o>
			objects and abstractions you create just as you with with regular Max objects. 
			This <m>#1</m>-style argument is a changeable argument that is replaced by whatever 
			number or symbol you type in as the corresponding argument when you use the 
			patch as an object inside another patch. You cannot use a changeable argument 
			to supply the name of an object itself, but you can use it anywhere inside your
			object as an argument.
		</bodytext>
		<bodytext>
			You can use a pound sign and a number to provide 
			variations on a name as a part of a symbol argument
			(e.g. <m>#1_velocity</m>), but 
			<i>the changeable argument must be the first part of the symbol</i> -
			(e.g. <m>#1-dial</m> will work, but <m>dial_#1</m> will not). 
		</bodytext>
		<bodytext>
			You can use this technique to create unique names for <o>send</o> and 
			<o>receive</o> objects in a subpatch (e.g. <m>send #1_currentvalue</m>)
			in order to guarantee that the exchange of messages between objects 
			will only happen within a single (local) instance of your subpatch.
		</bodytext>
		<bodytext>
			If you are opening a patcher file automatically by sending a <m>load</m> message 
			to a <o>pcontrol</o> object, you can use this method to set values inside the
			patcher being loaded by providing changeable <m>#</m> arguments as a part of
			the <m>load</m> message.
		</bodytext>
	<header2>
		Unique identifiers - using pound sign zero (<m>#0</m>) in objects and <o>message</o> box objects
	</header2>
		<bodytext>
			Using a zero as with the pound sign has a particular and special meaning. 
			When used as the beginning of a symbol argument (e.g., <m>#0_value</m>) 
			it transforms that argument into an identifier that is unique to each 
			and every patcher (and its subpatchers) when it is loaded. This special 
			usage lets you open multiple copies of a patcher that contains objects like
			<o>send</o> and <o>receive</o> while having the send and receive destinations
			remain separate for each copy of the patcher.
			<i>Note: the numbering of these unique identifiers is done by Max itself, and is
			not under user control</i>.
		</bodytext>
	<header1>
		Symbols and name spaces in Max
	</header1>
		<bodytext>
			Max uses a <i>global name space</i> - Max objects that have names 
			associated with them for collections of data (such as <o>coll</o>, 
			<o>table</o>, or <o>buffer~</o>) or object that specify named
			sources or destinations (such <o>send</o> and <o>receive</o>) share
			data. This allows you to share data between subpatches and abstractions
			in Max patch, or to share data between Max for Live devices (in the
			case of Max for Live devices, the name space is shared, but the "signal
			processing space" is separate; each Max for Live device processes
			its audio or data separately).
		</bodytext>
		<bodytext>
			If you want a named object to be unique to a device, use three dashes (---) to 
			start the name of your <o>buffer</o> or <o>send</o>/<o>receive</o> destination.
		</bodytext>
</vignette>

