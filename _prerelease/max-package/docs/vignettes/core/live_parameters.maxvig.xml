<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="_c74_vig.xsl" type="text/xsl"?>
<vignette name="Device Parameters in Max for Live">
	<header1>
		Device Parameters in Max for Live
	</header1>
	<bodytext>
		<i>Parameters</i> are settings of Max for Live devices you want to 
		store and/or automate in Live. In some cases, a parameter may be set 
		once and never change. In other cases, you'll want to
		use Max objects to interact with parameter values by clicking
		and moving the mouse, by receiving MIDI data mapped to a parameter, 
		or via Live
		<link module="core" name="live_automation" type="vignette">automation</link>.
	</bodytext>
	<bodytext>
	There are two ways to add parameters to your device: using the Live UI objects or using <o>pattr</o> objects with
<link anchor="parameter_mode_enable" module="core" name="live_pattr" type="vignette">parameter mode enabled</link>.
</bodytext>
	<bodytext>
	The
		<link module="core" name="live_parameterswindow" type="vignette">Parameters Window</link>  
	shows all parameters currently associated with a device, and permits you to change parameter attributes in a single place. You can also change parameter attributes for individual objects by using the Parameter tab of the <link module="core" name="inspector" type="vignette">Inspector</link>.
</bodytext>
	<header2>
Live UI Objects
</header2>
	<bodytext>
		Max for Live includes user interface objects designed to work with the parameter system whose names all begin with <m>live.</m>. These objects have some 
		special abilities:
	</bodytext>
	<ul>
		<li>
		They allow you to set an initial state that will be recalled automatically when a device is instantiated, saved, or edited.
	</li>
		<li>
		They work seamlessly with Live's MIDI and keyboard mapping capabilities.
	</li>
		<li>
		If you choose to make the UI object's parameter automatable, you can control it with Live's automation facility. 
	</li>
	</ul>
	<bodytext>
		In other respects, the Live UI objects act like ordinary Max user interface objects.
	</bodytext>
	<bodytext>
</bodytext>
	<header2>
Parameter Data Types
</header2>
	<bodytext>
		Parameters used in Max for Live can be one of four types: 
	</bodytext>
	<ul>
		<li>
		integer: integer values in the range 0 - 255 only
	</li>
		<li>
		floating-point: floating point values (no range restriction)	
	</li>
		<li>
		enum: an enumerated list of items
	</li>
		<li>
		blob: parameters that cannot be automated but can be stored in presets. 
		Non-automatable parameters may be any type of data you can store with a 
		<o>pattr</o> object: single values, lists, or strings.
	</li>
	</ul>
	<bodytext>
	</bodytext>
	<bluebox>
		<header2>
	Working with Integer values outside of the 0 - 255 range
</header2>
		<ul>
			<li>
		Select an object and click the Inspector button on the Patcher toolbar 
		to show the object's
		<link module="core" name="inspector" type="vignette">Inspector</link> .
	</li>
			<li>
		Choose <b>Float</b> from the pull-down menu in the Type attribute's Value column. 
	</li>
			<li>
		Choose <b>Int</b> from the pull-down menu in the Unit Style attribute's Value column. 
	</li>
		</ul>
		<bodytext>
		Although parameter value will be stored as a floating-point number, it will be displayed as an integer.
	</bodytext>
	</bluebox>
	<br/>
	<br/>
	<bluebox>
		<header2>
Setting an initial state for a Live UI object
</header2>
		<ul>
			<li>
		Select the Max for Live UI object and click the Inspector button in the Patcher toolbar 
		to show the object's
		<link module="core" name="inspector" type="vignette">Inspector</link>.
	</li>
			<li>Click the Parameter tab at the top of the inspector window to show the Parameter attributes.
	</li>
			<li>Ensure that Parameter Mode Enable is checked. 
	(It will be turned on by default for all Live UI objects that store values.)
	</li>
			<bodytext>
				<img src="images/pattr-initialization2.png"/>
			</bodytext>
			<li>Enter a floating-point value for the Initial Value attribute.
	</li>
		</ul>
	</bluebox>
	<br/>
	<bluebox>
		<header2>
Setting an initial state for a standard Max UI object
</header2>
		<ul>
			<li>
		Add a <o>pattr</o> object to your patch, typing the parameter name
		you want to use as an argument to the object. Connect the pattr
		object's middle (bindto) outlet to the Max UI object.
	</li>
			<bodytext>
				<img src="images/pattr-initialization1.png"/>
			</bodytext>
			<li>Select the <o>pattr</o> object and open the inspector. Click the Parameter tab to show the parameter attributes.
	</li>
			<li><link anchor="parameter_mode_enable" module="core" name="live_pattr" type="vignette">Enable Parameter Mode</link> 
		for the <o>pattr</o> object.
	</li>
			<li>
		Check Initial Enable checkbox.
	</li>
			<li>
		Enter a floating-point value for the Initial Value attribute.
	</li>
		</ul>
		<bodytext>
			<img src="images/pattr-initialization2.png"/>
		</bodytext>
	</bluebox>
	<br/>
	<a name="parametermodulation"/>
	<header1>
		Parameter Modulation
	</header1>
	<bodytext>
	Parameters can be modulated by clip envelopes in Live according to one of four modes:
</bodytext>
	<ul>
		<li>In <i>unipolar</i>mode, the parameter value is modulated between the minimum range value 
		(set using the <m>Modulation Range</m> attribute) and its current value.
	</li>
		<li>
		In <i>bipolar</i> mode, the full modulation range of a parameter is equal to twice the 
		distance between the current value and nearest boundary set using the parameterâ€™s 
		<m>Modulation Range</m> attribute. If the current value is exactly halfway between the 
		lower and upper ranges, the modulation range is equal to the total 
		parameter range.
	</li>
		<li>
		In <i>additive</i> mode, the modulation range from the current value is equal to plus 
		or minus one-half of the total range of the parameter. Values are truncated if 
		they fall outside of the <m>Modulation Range</m> attribute.
	</li>
		<li>
		In <i>absolute</i> mode, the current value is either the 
		upper or lower bound of the modulation range. If the current value is less than half 
		of the full parameter range, the modulation assumes a lower range of the current 
		value minus the modulation range. If the current value is greater than half 
		of the full parameter range, the modulation assumes the upper range is current 
		value and the lower range is equal to the current value minus the modulation 
		range value.
	</li>
	</ul>
	<br/>
	<bluebox>
		<header2>
	Enabling Parameter Modulation
</header2>
		<ul>
			<li>
		Select the parameter object (<o>pattr</o> or Live UI) and open the inspector. Click the Parameter tab to show the parameter attributes.
	</li>
			<li>
		Set the <m>Modulation Type</m> and, if applicable, the <m>Modulation Range</m> attributes.
	</li>
		</ul>
	</bluebox>
	<br/>
	<a name="m4lnames"/>
	<header1>
	Parameter Names
</header1>
	<bodytext>
	Max for Live provides several ways to name a parameter in a device, each
	of which is an
	<link module="core" name="attributes_intro" type="vignette">Attribute</link>.
	that can be set using an object's 
	<link module="core" name="inspector" type="vignette">Inspector</link>.
	These names can be set separately or linked together, and they serve several
	useful purposes.
</bodytext>
	<ul>
		<li>
		The <m>Scripting Name</m> attribute can be used to identify a UI object
		when used in conjunction with the Max <o>pattr</o> preset objects. When
		a UI object has a scripting name set, it will automatically appear in the
		<o>pattrstorage</o> object's inventory of parameter names when you add an
		<o>autopattr</o> object to your Max patch as described in the 
		<link module="max" name="pattrchapter02" type="tutorial">pattr Chapter 2</link>.		
		Max tutorial.
	</li>
		<li>
		The <m>Short Name</m> attribute can be used in conjunction with the
		<m>Display Parameter Name</m> attribute to label <o>live.dial</o>
		and <o>live.slider</o> object when you use them in a device.
	</li>
		<li>
		The <m>Long Name</m> attribute is be used to identify a parameter to
		the Live application's Parameter automation and MIDI mapping.
	</li>
	</ul>
	<bodytext>
		You can use a single name for all three of these attributes by checking
		the <m>Link to Scripting Name</m> attribute in the object's Inspector.
		You may find this to be a simple approach to managing paramter naming.
	</bodytext>
	<br/>
	<bluebox>
		<header2>
Setting the display name for a parameter
</header2>
		<ul>
			<li>
		Add a Max for Live UI object to your device. When the UI object first appears,
		it displays the name of the object itself.
	</li>
		</ul>
		<bodytext>
			<img src="images/parameter-label1.png"/>
		</bodytext>
		<ul>
			<li>
		Select a the object and click the Inspector button on the Patcher toolbar 
		to show the object's
		<link module="core" name="inspector" type="vignette">Inspector</link>.
	</li>
			<li>
		Double-click in the Value
		column for the Short Name setting to show a cursor and text box.
		Type in a name for the parameter, followed 
		by a carriage return. The Value column will be
		de-selected, and your parameter name will appear in the object's display. 
	</li>
		</ul>
		<bodytext>
			<img src="images/parameter-label2.png"/>
		</bodytext>
		<bodytext>
		Note: If your short name is too long, it will be automatically truncated. If you
		are using a <o>live.slider</o> or <o>live.gain~</o> object, you can use resize
		the object manually by clicking in the lower right-hand corner of the object and
		dragging. If you are using a <o>live.dial</o> object, you should enter a new
		horizontal value for the <m>Patching Rectangle</m> or <m>Presentation Rectangle</m>
		attributes using the object's Inspector.
	</bodytext>
	</bluebox>
	<br/>
	<header2>
	Naming automatable parameters
</header2>
	<bluebox>
		<header2>
Setting the display name for a parameter
</header2>
		<ul>
			<li>
		Add a Max for Live UI object to your device. When the UI object first appears,
		it displays the name of the object itself.
	</li>
		</ul>
		<bodytext>
			<img src="images/parameter-label1.png"/>
		</bodytext>
		<ul>
			<li>
		Select a the object and click the Inspector button on the Patcher toolbar 
		to show the object's
		<link module="core" name="inspector" type="vignette">Inspector</link>.
	</li>
			<li>
		Double-click in the Value
		column for the Short Name setting to show a cursor and text box.
		Type in a name for the parameter, followed 
		by a carriage return. The Value column will be
		de-selected, and your parameter name will appear in the object's display. 
	</li>
		</ul>
		<bodytext>
			<img src="images/parameter-label2.png"/>
		</bodytext>
		<bodytext>
		Note: If your short name is too long, it will be automatically truncated. If you
		are using a <o>live.slider</o> or <o>live.gain~</o> object, you can use resize
		the object manually by clicking in the lower right-hand corner of the object and
		dragging. If you are using a <o>live.dial</o> object, you should enter a new
		horizontal value for the <m>Patching Rectangle</m> or <m>Presentation Rectangle</m>
		attributes using the object's Inspector.
	</bodytext>
	</bluebox>
	<br/>
	<a name="customunitstyles"/>
	<header2>
	Custom unit styles
</header2>
	<bodytext>
	Max for Live provides a variety of options for setting unit styles that a
	UI object displays. If you want to use specify some other unit of measurement
	for display, you can create a custom unit style.
</bodytext>
	<bluebox>
		<header2>
Setting a custom unit style
</header2>
		<ul>
			<li>
		Select a Max for Live UI object and click the Inspector button on the Patcher toolbar 
		to show the object's
		<link module="core" name="inspector" type="vignette">Inspector</link>.
	</li>
			<li>
		Choose <b>Custom</b> from the Unit Style pulldown menu.
	</li>
			<li>
		Double-click in the Value column of the Custom Units 
		attribute to show a cursor and text box.
		Type in a string to be used for the custom unit style, followed 
		by a carriage return. The Value column will be
		de-selected, and the name will be set.
		<br/>
		You can type in custom unit strings as symbols (e.g. "Harmonic(s)"), in which case
		the parameter's value will be displayed in its 'Native' display mode, followed by
		the symbol (e.g. "12 Harmonic(s)" for an Int-typed parameter or "12.54 Harmonic(s)" 
		for a Float-typed parameter). If you would like to have additional control over the 
		numerical component displayed, you can enter a sprintf-style string 
		(e.g. "%0.2f Bogon(s)", which would display a value such as ".87 Bogons").
	</li>
		</ul>
	</bluebox>
	<br/>
	<bluebox>
		<header2>
Controlling a parameter's visibility
</header2>
		<ul>
			<li>
		You can change the visibility of a parameter by changing the 
		<m>Parameter Visibility</m> setting in the Inspector. If this 
		attribute is set to Automated and Stored, the parameter will 
		be stored in the Live Set and presets, and will be available 
		for automation. If this attribute is set to Stored Only, the 
		value will be stored, but it will not be visible to Live's 
		automation system. If this attribute is set to Hidden, it will 
		neither be stored nor available for automation.
	</li>
			<li>
		You may want to have a parameter Hidden when it affects other 
		Max for Live parameters. This will prevent problems with 
		overloading Live's undo buffer, and will also limit issues with 
		preset storage.
	</li>
		</ul>
	</bluebox>
	<br/>
</vignette>
