<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="_c74_vig.xsl" type="text/xsl"?>
<vignette name="About Collectives">
	<header1>
	About Collectives
	</header1>
<bodytext>
	<i>Collectives</i> are files that contain all of the necessary resources to use a patcher. These resources can include <link type="vignette" module="core" name="abstractions">abstractions</link>, external objects, image files, or audio files. Making a collective allows you to give someone else a project you've created in Max with the confidence it not be missing something it needs in order to work properly. That is, with one caveat: collectives, unlike patcher files, are generally platform-specific, because they contain platform-specific external objects.	
</bodytext>	
<bodytext>
	When you build a collective from a patcher, Max analyzes patcher to find its <i>dependencies</i> (the resources the patcher needs). You can use the <link type="vignette" module="core" name="collective_editor">collective editor</link> or write a <link type="vignette" module="core" name="collective_build_scripts">collective build script</link> to include files in a collective that are not added automatically. 
</bodytext>
<bodytext>
While collectives include the necessary resources to be opened in Max, they still require either Max or Max Runtime to operate. A <link type="vignette" module="core" name="standalones">standalone application</link> is a collective that is combined with a copy of Max Runtime. Standalone applications, which are <i>always</i> platform-specific, can eliminate all external dependencies for others to run your patch.
</bodytext>
<header2>
	The process of creating a collective
</header2>
	<bodytext>
		When you create a collective, youâ€™ll follow three basic steps:
	</bodytext>
	<ul>
	<li>
		Determine the top-level patch for your
		application. You will build a collective using that patch, and Max will
		include any external objects or <link type="vignette" module="core" name="abstractions">abstractions</link> that the top-level patch requires. Certain objects will report file dependencies to the collective builder; for example, the <o>js</o> object causes Max to include its associated Javascript file.
	</li>
	<li>
		Determine any other data files you will need to explicitly include
		in your collective. This may be a trial-and-error process as you see what is not included automatically.
	</li>
	<li>
		With the main patcher as the topmost window, choose <b>Build Collective / Application</b> from the File menu and use the <link type="vignette" module="core" name="collective_editor">collective editor</link> to configure and save the collective.
	</li>
</ul>
	<bodytext>
		You can open the resulting collective
		as you would any other Max document by choosing <b>Open...</b>
		from the File menu or by double-clicking on the collective in
		the Finder on the Mac or Explorer on Windows.
	</bodytext>
</vignette>
	
