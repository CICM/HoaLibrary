<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="_c74_vig.xsl" type="text/xsl"?>
<vignette name="Collective Editor">
	<header1>
	Collective Editor
	</header1>
<bluebox>
<header2>
Opening the collective editor
</header2>
	<ul>
	<li>
		With your top-level patcher as the active window, choose <b>Build Collective / Application...</b>
		from the File menu. The collective editor will appear.
	</li>
	</ul>
	<bodytext>
		<img src="images/collectives1.png"  />
	</bodytext>
</bluebox>
	<br /><space/>
	<bodytext>
		The Collective editor window includes a script area and a number of buttons
		that you use when creating a collective. The script 
		contains a list of files to include in the collective. The first entry in the script — <m>open thispatcher</m> —
		is added for you. This tells the collective to include the patcher that was the topmost window when the collective editor was opened. The <b>open</b> keyword means that the patcher will be opened when the collective file is opened.
	</bodytext>
	<bodytext>
		Any Max objects or abstractions used in the patch
		be included automatically in the collective, so you won’t need to
		add them. Certain Max objects, such as <o>js</o> and <o>fpic</o>, will automatically
		copy files they use into the collective for you (the <o>js</o> object copies its script file, but not files the script uses).
	</bodytext>
	<bodytext>
		A toplevel patcher window opens when the collective opens. You can have more than one toplevel patcher (you need at least one, however).
	</bodytext>
<bluebox>
<header2>
Adding toplevel patchers to your collective
</header2>
	<ul>
	<li>
		Click the <b>Toplevel Patcher...</b> button in the Collective editor and choose a patcher file from the open file dialog that appears.
	</li>
	<li>
		Once you select the file, a new line using the <b>open</b> keyword is added to the script.
	</li>
	</ul>
	<bodytext>
		<img src="images/collectives2.png"  />
	</bodytext>
	<bodytext>
		If you were to open this collective, both of the files listed with the <b>open</b> keyword would initially be visible.
	</bodytext>
</bluebox>
	<br /><space/>
	<bodytext>
		If there are other files used by a toplevel patcher in the collective, you may need to add them explicitly in the following cases:
	</bodytext>
	<ul>
	<li>
		Objects in your patch load data from files. Although some
		objects handle inclusion of their files for you, in many cases, the object has no idea what you will load into it, because you use a message to load the file while the patch is running.
	</li>
	<li>
		Your patch loads additional patchers dynamically (with a load message to the <o>pcontrol</o> object). If you want the loaded patcher's dependencies analyzed, use the Patcher... button (specifying the <b>patcher</b> keyword). If you do <i>not</i> want the patcher to be analyzed, use the Include File... button (specifying the <b>include</b> keyword).
	</li>
	</ul>
<bluebox>
<header2>
Adding files to a collective
</header2>
	<ul>
	<li>
		Click the <b>Include File...</b> button in the Collective editor window and select the file you want to add from the open file dialog.
	</li>
	<li>
		The full path of the file chosen will be added to the build script preceded by the <b>include</b> keyword.
	</li>
	</ul>
</bluebox>
	<br /><space/>
	<bodytext>
		If you have an entire folder of data files you want to include, you can include all the files at once.
	</bodytext>
<bluebox>
<header2>
Including all files in a folder in a collective
</header2>
	<ul>
	<li>
		Click the <b>Include Folder...</b> button in the Collective editor window and select the folder you want to add from the open file dialog.
	</li>
	<li>
		The full path of the folder chosen will be added to the build script preceded by the <b>include</b> keyword.
	</li>
	</ul>
	<bodytext>
		Note: Including a folder will only include files <i>in the folder itself</i>. Folders inside the folder you select will not be included.
	</bodytext>
</bluebox>
	<br />
	<bodytext>
		Editing a collective script to include a large number of files and folders can be time consuming. To avoid repeating the process, you can save a <link type="vignette" module="core" name="collective_build_scripts">collective build script</link>.
	</bodytext>
	<bluebox>
	<header2>
	Building a collective
	</header2>
		<ul>
		<li>
			Click the Build button in the Collective editor window, choose <b>Max collective</b> from the Format pop-up menu in the file dialog box
			that appears, and type in a unique name for your collective.
		</li>
		<li>
			As your collective is built, a listing of the objects and files being included will be
			printed in the Max window. 
		</li>
		</ul>
		<bodytext>
			To ensure they can be properly opened, collective files should have the .mxf extension.
		</bodytext>
	</bluebox>
</vignette>
