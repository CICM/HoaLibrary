#N canvas 138 187 1076 565 10;
#X declare -lib HoaLibrary/hoa.library;
#X declare -lib hoa.library;
#X msg -134 -181 \; pd dsp 1;
#X msg -134 -146 \; pd dsp 0;
#X obj -236 -328 hoa.2d.process~ 2 hoa.amp~ planewaves @maison zozo
;
#X obj -695 -563 cnv 15 552 40 empty \$0-pddp.cnv.header hoa.process~
3 12 0 18 -228856 -1 0;
#X obj -111 -541 hoa.connect;
#X obj -111 -562 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj -25 -538 declare -lib HoaLibrary/hoa.library;
#X obj -25 -559 declare -lib hoa.library;
#X text -690 -417 2nd argument is the name of the patcher to instantiate.
;
#X text -690 -467 1st argument is the order if you use hoa.process~
in the circular harmonics domain or the number of channels if you use
it in the plane waves domain.;
#X text -686 -31 Eliott Paris Â© 2012-2013 CICM / Universite Paris
8;
#X text -686 -47 hoalibrary | Julien Colafrancesco \, Pierre Guillot
;
#X text -690 -297 Extra arguments and attributes are sent to object
hoa.this.process~ if there is one inside the patcher. You should look
at the help.;
#X text -690 -247 The number of inlets and outlets depends on the inlet
and outlet configuration of the patcher. You should look at the help.
;
#X text -690 -197 Important: If you edit the patcher \, you have recreate
hoa.process~ to reflect the changes.;
#X text -44 -135 The hoa.thisprocess~ use of this patch is an example
made to show how it works. You would prefer to look at the real uses
of hoa.process~.;
#X text -240 -467 1st argument is the order if you use hoa.process~
in the circular harmonics domain or the number of channels if you use
it in the plane waves domain.;
#X text -693 -541 A multi-patcher for circular or spherical harmonics
and;
#X text -355 -541 plane waves domains;
#X text -693 -522 hoa.process~ helps the creation of processing in
the circular or spherical harmonics and plane waves domains by instantiating
several instances of a patcher.;
#X text -690 -397 3rd argument is the domain \, harmonics (default)
or planewaves. Note that if you use hoa.process~ in the harmonics domain
\, it instantiates 2 * order + 1 times (the number of harmonics in
2D) or (order + 1) * (order + 1) (the number of harmonics in 3D) the
partcher and if you use it in the plane waves domain \, it instanctiates
the patcher as many times as the number of channels.;
#X connect 5 0 4 0;
