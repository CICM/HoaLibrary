/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
HoaMeterAudioProcessorEditor::HoaMeterAudioProcessorEditor (HoaMeterAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
    speakerOffset_Slider ("speakerOffset")
{
    bg = ImageCache::getFromMemory (BinaryData::background_jpg, BinaryData::background_jpgSize);
    addAndMakeVisible(&theMeter);
    
    //add the draggable-number-box sliders :
    addAndMakeVisible (&speakerOffset_Slider);
    speakerOffset_Slider.addChangeListener(this);
    speakerOffset_Slider.setRange(-180, 180, 0.5);
    
    startTimer(100);
    setSize (bg.getWidth(), bg.getHeight());
    checkAllProcessorValues();
}

HoaMeterAudioProcessorEditor::~HoaMeterAudioProcessorEditor()
{
    speakerOffset_Slider.removeChangeListener(this);
}

void HoaMeterAudioProcessorEditor::timerCallback()
{
    HoaMeterAudioProcessor* ourProcessor = getProcessor();
    m_nbSpeakers = ourProcessor->f_numberOfLoudspeakers;
    theMeter.setAmplitudeOfLoudspeakers(ourProcessor->f_amplitudeOfLoudspeakers, m_nbSpeakers);
    ourProcessor->resetAmplitude();
    repaint();
}

//==============================================================================
void HoaMeterAudioProcessorEditor::paint (Graphics& g)
{
    g.drawImage(bg, 0, 0, bg.getWidth(), bg.getHeight(), 0, 0, bg.getWidth(), bg.getHeight());
    theMeter.setBounds (25, 25, getWidth()-50, getWidth()-50);
    speakerOffset_Slider.setBounds (422, 459, 62, 20);
    g.setColour(Colour((uint8)50, (uint8)50, (uint8)50, (float)0.5));
    g.drawText(String("in : ")+=String(m_nbSpeakers), 450, 40, 60, 20, Justification::left, true);
    g.drawText(String("out : ")+=String(m_nbSpeakers), 442, 60, 60, 20, Justification::left, true);
}

void HoaMeterAudioProcessorEditor::resized()
{
}

//==============================================================================

void HoaMeterAudioProcessorEditor::checkAllProcessorValues()
{
    HoaMeterAudioProcessor* ourProcessor = getProcessor();
    
    // set the offset
    speakerOffset_Slider.setValue (ourProcessor->getScaledParameter(HoaMeterAudioProcessor::m_offset_of_loudspeakers_parameter), dontSendNotification);
    theMeter.setSpeakerOffset(ourProcessor->getScaledParameter(HoaMeterAudioProcessor::m_offset_of_loudspeakers_parameter));
    
    // set number of loudspeakers
    m_nbSpeakers = ourProcessor->f_numberOfLoudspeakers;
}

void HoaMeterAudioProcessorEditor::audioProcessorParameterChanged (AudioProcessor *processor, int parameterIndex, float newValue)
{
    HoaMeterAudioProcessor* ourProcessor = getProcessor();
    
    if(parameterIndex == HoaMeterAudioProcessor::m_offset_of_loudspeakers_parameter) {
        speakerOffset_Slider.setValue (ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
        theMeter.setSpeakerOffset(ourProcessor->getScaledParameter(parameterIndex));
    }
}
void HoaMeterAudioProcessorEditor::audioProcessorChanged (AudioProcessor *processor)
{
    ;
}

void HoaMeterAudioProcessorEditor::audioProcessorParameterChangeGestureBegin (AudioProcessor *processor, int parameterIndex)
{
    ;
}
void HoaMeterAudioProcessorEditor::audioProcessorParameterChangeGestureEnd (AudioProcessor *processor, int parameterIndex)
{
    ;
}

void HoaMeterAudioProcessorEditor::changeListenerCallback (ChangeBroadcaster* source)
{
    if (source == &speakerOffset_Slider) {
        theMeter.setSpeakerOffset(speakerOffset_Slider.getValue());
        getProcessor()->setParameterNotifyingHost (HoaMeterAudioProcessor::m_offset_of_loudspeakers_parameter, (float) (speakerOffset_Slider.getValue()+ 180.0f)/360.0f);
    }
}
