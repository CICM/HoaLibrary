/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
HoaplugAudioProcessorEditor::HoaplugAudioProcessorEditor (HoaplugAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
    nbSources_Slider ("nbSources"),
    nbSpeakers_Slider ("nbSpeakers"),
    speakerOffset_Slider ("speakerOffset"),
    speakerDistance_Slider ("speakerDistance")
{
    bg = ImageCache::getFromMemory (BinaryData::background_jpg, BinaryData::background_jpgSize);
    
    //add the draggable-number-box sliders :
    addAndMakeVisible (&nbSources_Slider);
    nbSources_Slider.addChangeListener(this);
    nbSources_Slider.setRange(1, 64, 1);
    
    addAndMakeVisible (&nbSpeakers_Slider);
    nbSpeakers_Slider.addChangeListener(this);
    nbSpeakers_Slider.setRange(3, 64, 1);
    
    addAndMakeVisible (&speakerOffset_Slider);
    speakerOffset_Slider.addChangeListener(this);
    speakerOffset_Slider.setRange(-180, 180, 1);
    
    addAndMakeVisible (&speakerDistance_Slider);
    speakerDistance_Slider.addChangeListener(this);
    speakerDistance_Slider.setRange(0., 1., 0.01);
    
    // add the HoaMap component
    addAndMakeVisible (&theMap);
    theMap.addChangeListener(this);
    
    updateMouseCursor ();
    
    // Setting size of our plug :
    setSize (580, 420);
    
    // start a timer to check peridiocally if any value of the processor has changed
    startTimer (50);
    
    getProcessor()->addListener(this);
    getProcessor()->addChangeListener(this);
}

HoaplugAudioProcessorEditor::~HoaplugAudioProcessorEditor()
{
    nbSources_Slider.removeChangeListener(this);
    nbSpeakers_Slider.removeChangeListener(this);
    speakerOffset_Slider.removeChangeListener(this);
    speakerDistance_Slider.removeChangeListener(this);
    theMap.removeAllChangeListeners();
    getProcessor()->removeListener(this);
}

//==============================================================================
void HoaplugAudioProcessorEditor::paint (Graphics& g)
{
    g.drawImage(bg, 0, 0, bg.getWidth(), bg.getHeight(), 0, 0, bg.getWidth(), bg.getHeight());
        
    nbSources_Slider.setBounds (getWidth()-159, 216, 58, 23);
    nbSpeakers_Slider.setBounds (getWidth()-80, 216, 58, 23);
    speakerOffset_Slider.setBounds (getWidth()-80, 278, 62, 23);
    speakerDistance_Slider.setBounds (getWidth()-80, 347, 60, 23);    
    theMap.setBounds (10, 10, 400, 400);
}

void HoaplugAudioProcessorEditor::audioProcessorParameterChanged (AudioProcessor *processor, int parameterIndex, float newValue)
{
    HoaplugAudioProcessor* ourProcessor = getProcessor();
    
    /*
    speakerDistance_Slider.setValue (ourProcessor->m_distance_of_loudspeakers, dontSendNotification);
    theMap.setSpeakerDistance(ourProcessor->m_distance_of_loudspeakers);
    speakerOffset_Slider.setValue (ourProcessor->m_offset_of_loudspeakers, dontSendNotification);
    theMap.setSpeakerOffset(ourProcessor->m_offset_of_loudspeakers);
    
    theMap.setNbSources(ourProcessor->m_number_of_sources);
    nbSources_Slider.setValue(ourProcessor->m_number_of_sources);
    theMap.setNbSpeakers(ourProcessor->m_number_of_loudspeakers);
    nbSpeakers_Slider.setValue(ourProcessor->m_number_of_loudspeakers);
    */
    
    if (parameterIndex < 2)
    {
        if (parameterIndex == HoaplugAudioProcessor::m_distance_of_loudspeakers_parameter) {
            speakerDistance_Slider.setValue (ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
            theMap.setSpeakerDistance(ourProcessor->getScaledParameter(parameterIndex));
        }
        else if (parameterIndex == HoaplugAudioProcessor::m_offset_of_loudspeakers_parameter) {
            speakerOffset_Slider.setValue (ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
            theMap.setSpeakerOffset(ourProcessor->getScaledParameter(parameterIndex));
        }
    }
    else
    {
        int indexBis;
        if(parameterIndex%2 == 0)
        {
            indexBis = ((parameterIndex-2)/2);
            theMap.setSourceAbscissa(indexBis, ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
        }
        else
        {
            indexBis = ((parameterIndex-3)/2);
            theMap.setSourceOrdinate(indexBis, ourProcessor->getScaledParameter(parameterIndex), dontSendNotification);
        }
    }
}
void HoaplugAudioProcessorEditor::audioProcessorChanged (AudioProcessor *processor)
{
    //HoaplugAudioProcessor* ourProcessor = getProcessor();
    /*
    theMap.setNbSources(ourProcessor->m_number_of_sources);
    nbSources_Slider.setValue(ourProcessor->m_number_of_sources);
    theMap.setNbSpeakers(ourProcessor->m_number_of_loudspeakers);
    nbSpeakers_Slider.setValue(ourProcessor->m_number_of_loudspeakers);
    */
}

void HoaplugAudioProcessorEditor::audioProcessorParameterChangeGestureBegin (AudioProcessor *processor, int parameterIndex)
{
    ;
}
void HoaplugAudioProcessorEditor::audioProcessorParameterChangeGestureEnd (AudioProcessor *processor, int parameterIndex)
{
    ;
}

void HoaplugAudioProcessorEditor::timerCallback()
{
    
    HoaplugAudioProcessor* ourProcessor = getProcessor();
    
    theMap.setNbSources(ourProcessor->m_number_of_sources, dontSendNotification);
    nbSources_Slider.setValue(ourProcessor->m_number_of_sources, dontSendNotification);
    theMap.setNbSpeakers(ourProcessor->m_number_of_loudspeakers, dontSendNotification);
    nbSpeakers_Slider.setValue(ourProcessor->m_number_of_loudspeakers, dontSendNotification);
}

void HoaplugAudioProcessorEditor::valueChanged (Value& value)
{
    ;
}

void HoaplugAudioProcessorEditor::changeListenerCallback (ChangeBroadcaster* source)
{
    //getProcessor()->beginParameterChangeGesture	(0);
    //getProcessor()->endParameterChangeGesture(slider->getName().getIntValue());
    if (source == getProcessor()) {
        /*
        theMap.setNbSources(getProcessor()->m_number_of_sources);
        nbSources_Slider.setValue(getProcessor()->m_number_of_sources);
        theMap.setNbSpeakers(getProcessor()->m_number_of_loudspeakers);
        nbSpeakers_Slider.setValue(getProcessor()->m_number_of_loudspeakers);
        */
    }
    else if (source == &theMap) {
        for (int i = 0; i < nbSources_Slider.getValue(); i++)
        {
            getProcessor()->setParameterNotifyingHost ( i*2+2, (float) (theMap.getSourceAbscissa(i) + 1) * 0.5);
            getProcessor()->setParameterNotifyingHost ( i*2+3, (float) (theMap.getSourceOrdinate(i) + 1) * 0.5);
        }
    }
    else if (source == &nbSources_Slider) {
        theMap.setNbSources(nbSources_Slider.getValue(), dontSendNotification);
    }
    else if (source == &nbSpeakers_Slider) {
        theMap.setNbSpeakers(nbSpeakers_Slider.getValue(), dontSendNotification);
    }
    else if (source == &speakerOffset_Slider) {
        theMap.setSpeakerOffset(speakerOffset_Slider.getValue(), dontSendNotification);
        getProcessor()->setParameterNotifyingHost (HoaplugAudioProcessor::m_offset_of_loudspeakers_parameter, (float) (speakerOffset_Slider.getValue()+ 180)/360) ;
        /*
        getProcessor()->setParameterNotifyingHost (HoaplugAudioProcessor::m_offset_of_loudspeakers_parameter, (float) speakerOffset_Slider.getValue());
        */
    }
    else if (source == &speakerDistance_Slider) {
        theMap.setSpeakerDistance(speakerDistance_Slider.getValue(), dontSendNotification);
        getProcessor()->setParameterNotifyingHost (HoaplugAudioProcessor::m_distance_of_loudspeakers_parameter, (float) speakerDistance_Slider.getValue());
    }
}

